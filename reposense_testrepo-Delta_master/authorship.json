[{"path":"src/main/java/seedu/address/MainApp.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitId":"-"},"content":" */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"codeeong"},"content":"    public static final Version VERSION \u003d new Version(1, 1, 0, true);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":1,"-":211}},{"path":"src/main/java/seedu/address/commons/core/Config.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitId":"codeeong"},"content":"    private String appTitle \u003d \"My Team Manager\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":"    public static final String MESSAGE_INVALID_THEME \u003d \"This theme does not exist!\\n\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_TEAM_NOT_FOUND \u003d \"Team does not exist or is not specified!\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_ALL_INDEX \u003d \"All person index provided is invalid\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":1,"-":15}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeTagColourEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":" * Indicates a request to change tag colour"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ChangeTagColourEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public final String tagColour;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public final String tagName;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ChangeTagColourEvent(String tagName, String tagColour) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.tagColour \u003d tagColour;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":7,"-":16}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeThemeEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**@@author Codee */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Indicates a request for theme change."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ChangeThemeEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public final String theme;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public ChangeThemeEvent(String theme) {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        this.theme \u003d theme;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return this.getClass().toString();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":4,"-":17}},{"path":"src/main/java/seedu/address/commons/events/ui/ClearTeamsEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":" * Event handler for clearing of all teams."},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"// @@author Codee"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ClearTeamsEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public ClearTeamsEvent() {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"},{"lineNumber":20,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"codeeong":7,"-":13}},{"path":"src/main/java/seedu/address/commons/events/ui/DeselectTeamEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":" * Indicates a request to deselected selected teams."},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":"public class DeselectTeamEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":"    public DeselectTeamEvent() {"},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":13,"author":{"gitId":"codeeong"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"codeeong"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"codeeong"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":16,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"codeeong"},"content":"}"}],"authorContributionMap":{"codeeong":17}},{"path":"src/main/java/seedu/address/commons/events/ui/HighlightSelectedTeamEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":" * Indicates a request to highlight selected team name."},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class HighlightSelectedTeamEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public final String teamName;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public HighlightSelectedTeamEvent(String teamName) {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        this.teamName \u003d teamName;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":7,"-":14}},{"path":"src/main/java/seedu/address/commons/events/ui/PersonDetailsChangedEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":" * Represents a change in the person details panel."},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":" *"},{"lineNumber":10,"author":{"gitId":"-"},"content":" /** @@author Codee */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class PersonDetailsChangedEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Person editedPerson;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public PersonDetailsChangedEvent(Person editedPerson, Index index) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        this.editedPerson \u003d editedPerson;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Person getPerson() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return this.editedPerson;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Index getIndex() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return this.index;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":9,"-":25}},{"path":"src/main/java/seedu/address/commons/events/ui/PersonDetailsChangedNoParamEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":" * Represents a change in the person details panel, but no paramaters."},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":" *"},{"lineNumber":8,"author":{"gitId":"-"},"content":" /** @@author Codee */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PersonDetailsChangedNoParamEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public PersonDetailsChangedNoParamEvent() { }"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":7,"-":10}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowNewTeamNameEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":" * Indicates a request to show new team name."},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ShowNewTeamNameEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public final String teamName;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public ShowNewTeamNameEvent(String teamName) {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        this.teamName \u003d teamName;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":7,"-":15}},{"path":"src/main/java/seedu/address/commons/events/ui/UndoTeamsEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":" * Event handler for undoing clearing of all teams."},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"// @@author Codee"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class UndoTeamsEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public UndoTeamsEvent() {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":7,"-":11}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandTrie;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"codeeong"},"content":"    /** Returns an unmodifiable view of list of teams */"},{"lineNumber":28,"author":{"gitId":"codeeong"},"content":"    ObservableList\u003cTeam\u003e getInitTeamList();"},{"lineNumber":29,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /** Returns the command trie. */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    CommandTrie getCommandTrie();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":4,"-":32}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandTrie;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final CommandTrie commandTrie;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        commandTrie \u003d new CommandTrie();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText, model.getLockState());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            return result;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } finally {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            history.add(commandText);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"codeeong"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"codeeong"},"content":"    public ObservableList\u003cTeam\u003e getInitTeamList() {"},{"lineNumber":59,"author":{"gitId":"codeeong"},"content":"        return model.getInitTeamList();"},{"lineNumber":60,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public CommandTrie getCommandTrie() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return commandTrie;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":1,"codeeong":6,"-":64}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AVATAR;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JERSEY_NUMBER;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAM_NAME;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.DeselectTeamEvent;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.HighlightSelectedTeamEvent;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.team.exceptions.TeamNotFoundException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"//@@author lithiumlkid"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Adds a player to the address book."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a player to the address book. \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TEAM_NAME + \"TEAMNAME] \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_RATING + \"RATING] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_POSITION + \"POSITION] \""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_JERSEY_NUMBER + \"JERSEY_NUMBER] \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_AVATAR + \"AVATAR] \""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":52,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":53,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":54,"author":{"gitId":"-"},"content":"            + PREFIX_RATING + \"0 \""},{"lineNumber":55,"author":{"gitId":"-"},"content":"            + PREFIX_POSITION + \"1 \""},{"lineNumber":56,"author":{"gitId":"-"},"content":"            + PREFIX_JERSEY_NUMBER + \"17 \""},{"lineNumber":57,"author":{"gitId":"codeeong"},"content":"            + PREFIX_TAG + \"goodAttitude\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PARAMETERS \u003d PREFIX_NAME + \"NAME \""},{"lineNumber":60,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":62,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":63,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_RATING + \"RATING] \""},{"lineNumber":64,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_POSITION + \"POSITION] \""},{"lineNumber":65,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_JERSEY_NUMBER + \"JERSEY_NUMBER] \""},{"lineNumber":66,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_AVATAR + \"AVATAR] \""},{"lineNumber":67,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]\";"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New player added: %1$s\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This player already exists in the address book\";"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"Avatar image file specified does not exist\";"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (!toAdd.getAvatar().toString().equals(UNSPECIFIED_FIELD)) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                toAdd.getAvatar().setFilePath(toAdd.getName().fullName);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            if (!toAdd.getTeamName().toString().equals(UNSPECIFIED_FIELD)) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                model.assignPersonToTeam(toAdd, toAdd.getTeamName());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                model.updateFilteredPersonList(toAdd.getTeamName());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                EventsCenter.getInstance().post(new HighlightSelectedTeamEvent(toAdd.getTeamName().toString()));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                EventsCenter.getInstance().post(new DeselectTeamEvent());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_FILE_NOT_FOUND);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        } catch (TeamNotFoundException e) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_TEAM_NOT_FOUND);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        TeamName teamName \u003d toAdd.getTeamName();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!model.getAddressBook().getTeamList().stream().anyMatch(t -\u003e t.getTeamName().equals(teamName))) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            if (!teamName.toString().equals(UNSPECIFIED_FIELD)) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                throw new CommandException((Messages.MESSAGE_TEAM_NOT_FOUND));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":1,"codeeong":1,"-":122}},{"path":"src/main/java/seedu/address/logic/commands/ChangeThemeCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import seedu.address.ui.MainWindow;"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":" * Changes the theme of the Address Book."},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ChangeThemeCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"changeTheme\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"cte\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \": Changes the theme of MTM.\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: THEME (must be either Light, or Dark)\\n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Examples: changeTheme Light, cte Dark\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_THEME_SUCCESS \u003d \"Theme updated to: %1$s\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final String theme;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public ChangeThemeCommand(String theme) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.theme \u003d theme.trim();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!isValidTheme(this.theme)) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_THEME);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if ((MainWindow.getCurrentTheme()).contains(this.theme)) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new CommandException(\"Theme is already set to \" + this.theme + \"!\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().post(new ChangeThemeEvent(this.theme));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_THEME_SUCCESS, this.theme));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private boolean isValidTheme(String theme) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return theme.equals(\"Light\") || theme.equals(\"Dark\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof ChangeThemeCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.theme.equals(((ChangeThemeCommand) other).theme)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":11,"-":43}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.ClearTeamsEvent;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Clears the address book."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // @@author Codee"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().post(new ClearTeamsEvent());"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // @@author"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":1,"codeeong":2,"-":25}},{"path":"src/main/java/seedu/address/logic/commands/CreateCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.ShowNewTeamNameEvent;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.team.exceptions.DuplicateTeamException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"//@@author jordancjq"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Creates a team to the application"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CreateCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"create\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"ct\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"Creates a team in MTM. \""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"TEAM_NAME\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Arsenal\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"TEAM_NAME\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New team created: %1$s\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_TEAM \u003d \"This team already exist in the manager\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Team toCreate;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates a CreateCommand to add the specified (@code Team)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public CreateCommand(Team team) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(team);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.toCreate \u003d team;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            model.createTeam(toCreate);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (DuplicateTeamException e) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TEAM);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"codeeong"},"content":"        EventsCenter.getInstance().post(new ShowNewTeamNameEvent(toCreate.getTeamName().toString()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toCreate.getTeamName().toString()));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                || (other instanceof CreateCommand // instanceof handles nulls"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                \u0026\u0026 toCreate.equals(((CreateCommand) other).toCreate));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":3,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"INDEX\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Person personToDelete;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":1,"-":69}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AVATAR;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JERSEY_NUMBER;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.DeselectTeamEvent;"},{"lineNumber":28,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.PersonDetailsChangedEvent;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"//@@author lithiumlkid"},{"lineNumber":47,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitId":"-"},"content":" * Edits the details of an existing player in the address book."},{"lineNumber":49,"author":{"gitId":"-"},"content":" */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the player identified \""},{"lineNumber":56,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last player listing. \""},{"lineNumber":57,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":58,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":59,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":60,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":62,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":63,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_RATING + \"RATING] \""},{"lineNumber":64,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_POSITION + \"POSITION] \""},{"lineNumber":65,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_JERSEY_NUMBER + \"JERSEY_NUMBER] \""},{"lineNumber":66,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_AVATAR + \"AVATAR] \""},{"lineNumber":67,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"INDEX \""},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":75,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":76,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":77,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_RATING + \"RATING] \""},{"lineNumber":78,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_POSITION + \"POSITION] \""},{"lineNumber":79,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_JERSEY_NUMBER + \"JERSEY_NUMBER] \""},{"lineNumber":80,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_AVATAR + \"AVATAR] \""},{"lineNumber":81,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]\";"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This player already exists in the address book.\";"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"Avatar image file specified does not exist\";"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private Person personToEdit;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private Person editedPerson;"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @param index of the player in the filtered player list to edit"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the player with"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            if (!editedPerson.getAvatar().toString().equals(UNSPECIFIED_FIELD)) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                editedPerson.getAvatar().setFilePath(editedPerson.getName().fullName);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The target player cannot be missing\");"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_FILE_NOT_FOUND);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        //@@author Codee"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().post(new PersonDetailsChangedEvent(editedPerson, index));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //@@author"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().post(new DeselectTeamEvent());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * NOTE: Private fields will not be edited."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d (personToEdit.getPhone().isPrivate())"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                ? personToEdit.getPhone() : editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d (personToEdit.getEmail().isPrivate())"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                ? personToEdit.getEmail() : editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d (personToEdit.getAddress().isPrivate())"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                ? personToEdit.getAddress() : editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        Remark updatedRemark \u003d (personToEdit.getRemark().isPrivate())"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                ? personToEdit.getRemark() : personToEdit.getRemark();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        TeamName updatedTeamName \u003d personToEdit.getTeamName();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        Rating updatedRating \u003d editPersonDescriptor.getRating().orElse(personToEdit.getRating());"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        JerseyNumber updatedJerseyNumber \u003d editPersonDescriptor.getJerseyNumber()"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                .orElse(personToEdit.getJerseyNumber());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Position updatedPosition \u003d editPersonDescriptor.getPosition().orElse(personToEdit.getPosition());"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Avatar updatedAvatar \u003d editPersonDescriptor.getAvatar().orElse(personToEdit.getAvatar());"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark,"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                updatedTeamName, updatedTags, updatedRating, updatedPosition, updatedJerseyNumber, updatedAvatar);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * Stores the details to edit the player with. Each non-empty field value will replace the"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * corresponding field value of the player."},{"lineNumber":192,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        private Rating rating;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        private Position position;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        private JerseyNumber jerseyNumber;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        private Avatar avatar;"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":207,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":208,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":209,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            setRating(toCopy.rating);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            setPosition(toCopy.position);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            setJerseyNumber(toCopy.jerseyNumber);"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            setAvatar(toCopy.avatar);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":223,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":224,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags,"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                    this.rating, this.position, this.jerseyNumber, this.avatar);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":263,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":264,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":265,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":271,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":272,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":273,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":274,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"        public void setRating(Rating rating) {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"            this.rating \u003d rating;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"        public Optional\u003cRating\u003e getRating() {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(rating);"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"        public void setPosition(Position position) {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"            this.position \u003d position;"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"        public Optional\u003cPosition\u003e getPosition() {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(position);"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"        public void setJerseyNumber(JerseyNumber jerseyNumber) {"},{"lineNumber":296,"author":{"gitId":"-"},"content":"            this.jerseyNumber \u003d jerseyNumber;"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"        public Optional\u003cJerseyNumber\u003e getJerseyNumber() {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(jerseyNumber);"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"        public void setAvatar(Avatar avatar) {"},{"lineNumber":304,"author":{"gitId":"-"},"content":"            this.avatar \u003d avatar;"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":"        public Optional\u003cAvatar\u003e getAvatar() {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(avatar);"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":314,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":316,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":319,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":321,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":327,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":328,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":329,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":330,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":331,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getRating().equals(e.getRating())"},{"lineNumber":332,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPosition().equals(e.getPosition())"},{"lineNumber":333,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getJerseyNumber().equals(e.getJerseyNumber())"},{"lineNumber":334,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAvatar().equals(e.getAvatar());"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":337,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":1,"codeeong":1,"-":335}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"KEYWORD [MORE KEYWORD]\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/KeyCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"lohtianwei"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"//@@author lohtianwei"},{"lineNumber":4,"author":{"gitId":"lohtianwei"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":5,"author":{"gitId":"lohtianwei"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"import com.google.common.hash.Hashing;"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":13,"author":{"gitId":"lohtianwei"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"lohtianwei"},"content":" * Sets lock in model to true/false depending on current state"},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":" */"},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":"public class KeyCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_WORD \u003d \"key\";"},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"k\";"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Toggles the lock on MTM. \""},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":"            + \"Functionality of MTM reduced\\n\""},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":"            + \"Input empty password to see current lock state\\n\""},{"lineNumber":23,"author":{"gitId":"lohtianwei"},"content":"            + \"Parameters: [PASSWORD]\\n\""},{"lineNumber":24,"author":{"gitId":"lohtianwei"},"content":"            + \"Example: \" + COMMAND_WORD"},{"lineNumber":25,"author":{"gitId":"lohtianwei"},"content":"            + \" myPassword\";"},{"lineNumber":26,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"MTM lock toggled!\";"},{"lineNumber":28,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_WRONG_PASS \u003d \"Password entered is incorrect. Please try again.\";"},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":30,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"[PASSWORD]\";"},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":"    private String password;"},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":34,"author":{"gitId":"lohtianwei"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(KeyCommand.class);"},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":36,"author":{"gitId":"lohtianwei"},"content":"    public KeyCommand(String password) {"},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":"        this.password \u003d password;"},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":40,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"lohtianwei"},"content":"     * Checks if input password is correct."},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lohtianwei"},"content":"    private boolean correctPassword() {"},{"lineNumber":44,"author":{"gitId":"lohtianwei"},"content":"        UserPrefs up \u003d model.getUserPrefs();"},{"lineNumber":45,"author":{"gitId":"lohtianwei"},"content":"        String hash \u003d Hashing.sha256().hashString(password, StandardCharsets.UTF_8).toString();"},{"lineNumber":46,"author":{"gitId":"lohtianwei"},"content":"        return hash.equals(up.getAddressBookHashedPass());"},{"lineNumber":47,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":49,"author":{"gitId":"lohtianwei"},"content":"    private boolean emptyPass() {"},{"lineNumber":50,"author":{"gitId":"lohtianwei"},"content":"        return password.isEmpty();"},{"lineNumber":51,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"lohtianwei"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":"        if (emptyPass()) {"},{"lineNumber":56,"author":{"gitId":"lohtianwei"},"content":"            return new CommandResult(MESSAGE_USAGE + \"\\nLock state is now: \""},{"lineNumber":57,"author":{"gitId":"lohtianwei"},"content":"                    + Boolean.toString(model.getLockState()));"},{"lineNumber":58,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":"        if (correctPassword()) {"},{"lineNumber":61,"author":{"gitId":"lohtianwei"},"content":"            if (model.getLockState()) {"},{"lineNumber":62,"author":{"gitId":"lohtianwei"},"content":"                model.unlockAddressBookModel();"},{"lineNumber":63,"author":{"gitId":"lohtianwei"},"content":"            } else {"},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":"                model.lockAddressBookModel();"},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":"            logger.info(\"Lock state is now: \" + Boolean.toString(model.getLockState()));"},{"lineNumber":68,"author":{"gitId":"lohtianwei"},"content":"            return new CommandResult(MESSAGE_SUCCESS + \"\\nLock state is now: \""},{"lineNumber":69,"author":{"gitId":"lohtianwei"},"content":"                    + Boolean.toString(model.getLockState()));"},{"lineNumber":70,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":71,"author":{"gitId":"lohtianwei"},"content":"            throw new CommandException(MESSAGE_WRONG_PASS);"},{"lineNumber":72,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":74}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.DeselectTeamEvent;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":22,"author":{"gitId":"codeeong"},"content":"        EventsCenter.getInstance().post(new DeselectTeamEvent());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":1,"codeeong":4,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.PersonDetailsChangedNoParamEvent;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.UndoTeamsEvent;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Redo the previously undone command."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // @@author Codee"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().post(new UndoTeamsEvent());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().post(new PersonDetailsChangedNoParamEvent());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // @@author"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":1,"codeeong":3,"-":40}},{"path":"src/main/java/seedu/address/logic/commands/RemarkCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.PersonDetailsChangedEvent;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"//@@author jordancjq"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Updates the remark of an existing player in the address book."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class RemarkCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"rm\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the remark of the player identified \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last player listing. \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_REMARK + \"[REMARK]\\n\""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_REMARK + \"Must put on field\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"INDEX\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Remark added to: %1$s\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Remark removed from: %1$s\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final Remark remark;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Person personToEdit;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Person editedPerson;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, Remark remark) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(remark);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(personToEdit);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Updating remark should not result in duplicate\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The target player cannot be missing\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":67,"author":{"gitId":"codeeong"},"content":"        EventsCenter.getInstance().post(new PersonDetailsChangedEvent(editedPerson, index));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return new CommandResult(getSuccessMessage(editedPerson));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTeamName(), personToEdit.getTags(),"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                personToEdit.getRating(), personToEdit.getPosition(), personToEdit.getJerseyNumber(),"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                personToEdit.getAvatar());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Gets the corresponding success message based on the remark field from {@code personToEdit} after editing."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private String getSuccessMessage(Person person) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String message \u003d remark.value.isEmpty() ? MESSAGE_DELETE_REMARK_SUCCESS : MESSAGE_ADD_REMARK_SUCCESS;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":4,"-":107}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"INDEX\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":1,"-":54}},{"path":"src/main/java/seedu/address/logic/commands/SetCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_COLOUR;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.ChangeTagColourEvent;"},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":" * Adds a colour to a tag in address book."},{"lineNumber":13,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/** @@author Codee Ong Ong */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class SetCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"setTagColour\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"stc\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the colour of tags to the colour of choice \""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"TAG \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_TAG_COLOUR + \"TAG_COLOUR\\n\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_TAG_COLOUR + \"green\\n\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"Colours to choose from are : teal, red, yellow, blue, orange, brown, \\n\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"green, pink, black, grey\\n\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PARAMETERS \u003d PREFIX_TAG + \"TAG \" + PREFIX_TAG_COLOUR + \"TAG_COLOUR\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_TAG \u003d \"tag is invalid! Please input a valid tag name!\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"tag %1$s colour changed to %2$s\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final Tag tagToSet;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final String tagColour;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public SetCommand(Tag tag, String colour) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        tagToSet \u003d tag;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        tagColour \u003d colour;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        boolean isTagValid \u003d model.setTagColour(tagToSet, tagColour);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!tagToSet.isValidTagName(tagToSet.getTagName()) || !isTagValid) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new CommandResult(String.format(MESSAGE_INVALID_TAG));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().post(new ChangeTagColourEvent(tagToSet.getTagName(), tagColour));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, tagToSet.toString(), tagColour));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // Check if"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // (a) Object is the same object"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // (b) Object is an instance of the object and that toSet, tag and color are the same"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                || (other instanceof SetCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.tagToSet.getTagName().equals(((SetCommand) other).tagToSet.getTagName()))"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.tagColour.equals(((SetCommand) other).tagColour);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"},{"lineNumber":69,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"codeeong":13,"-":56}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"lohtianwei"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"//@@author lohtianwei"},{"lineNumber":4,"author":{"gitId":"lohtianwei"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.exceptions.NoPlayerException;"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"lohtianwei"},"content":" * Sorts all players in address book by field. Can be done in asc or desc order."},{"lineNumber":11,"author":{"gitId":"lohtianwei"},"content":" */"},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":13,"author":{"gitId":"lohtianwei"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":14,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"so\";"},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":"    public static final String BY_ASCENDING \u003d \"asc\";"},{"lineNumber":17,"author":{"gitId":"lohtianwei"},"content":"    public static final String BY_DESCENDING \u003d \"desc\";"},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts players in address book \""},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":"            + \"by fields in either ascending or descending order.\\n\""},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":"            + \"Parameters: FIELD ORDER\\n\""},{"lineNumber":23,"author":{"gitId":"lohtianwei"},"content":"            + \"Accepted fields for sort: name, email, address, rating, jersey, pos\\n\""},{"lineNumber":24,"author":{"gitId":"lohtianwei"},"content":"            + \"Accepted orders: asc \u0026 desc\\n\""},{"lineNumber":25,"author":{"gitId":"lohtianwei"},"content":"            + \"Example: \" + COMMAND_WORD"},{"lineNumber":26,"author":{"gitId":"lohtianwei"},"content":"            + \" name \" + BY_ASCENDING;"},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":28,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"FIELD ORDER\";"},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":30,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Players in address book have been sorted.\";"},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_EMPTY_BOOK \u003d \"No player(s) to sort.\";"},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":"    private final String field;"},{"lineNumber":34,"author":{"gitId":"lohtianwei"},"content":"    private final String order;"},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":36,"author":{"gitId":"lohtianwei"},"content":"    public SortCommand(String field, String order) {"},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":"        requireNonNull(field);"},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":"        requireNonNull(order);"},{"lineNumber":39,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":40,"author":{"gitId":"lohtianwei"},"content":"        this.field \u003d field;"},{"lineNumber":41,"author":{"gitId":"lohtianwei"},"content":"        this.order \u003d order;"},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":44,"author":{"gitId":"lohtianwei"},"content":"    public String getField() {"},{"lineNumber":45,"author":{"gitId":"lohtianwei"},"content":"        return this.field;"},{"lineNumber":46,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":48,"author":{"gitId":"lohtianwei"},"content":"    public String getOrder() {"},{"lineNumber":49,"author":{"gitId":"lohtianwei"},"content":"        return this.order;"},{"lineNumber":50,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":52,"author":{"gitId":"lohtianwei"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitId":"lohtianwei"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":"            model.sortPlayers(getField(), getOrder());"},{"lineNumber":56,"author":{"gitId":"lohtianwei"},"content":"        } catch (NoPlayerException npe) {"},{"lineNumber":57,"author":{"gitId":"lohtianwei"},"content":"            throw new CommandException(MESSAGE_EMPTY_BOOK);"},{"lineNumber":58,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"lohtianwei"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":61,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":62}},{"path":"src/main/java/seedu/address/logic/commands/TogglePrivacyCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"//@@author lohtianwei"},{"lineNumber":4,"author":{"gitId":"lohtianwei"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":10,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"lohtianwei"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.commons.events.ui.PersonDetailsChangedEvent;"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":24,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":26,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":30,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":34,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":36,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":"/**"},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":" * Toggles privacy of fields of player identified using it\u0027s last displayed index from the address book."},{"lineNumber":39,"author":{"gitId":"lohtianwei"},"content":" */"},{"lineNumber":40,"author":{"gitId":"lohtianwei"},"content":"public class TogglePrivacyCommand extends UndoableCommand {"},{"lineNumber":41,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_WORD \u003d \"toggleprivacy\";"},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"tp\";"},{"lineNumber":43,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":44,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Toggles the field privacy of the person\""},{"lineNumber":45,"author":{"gitId":"lohtianwei"},"content":"            + \" identified by the index number used in the last person listing.\\n\""},{"lineNumber":46,"author":{"gitId":"lohtianwei"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":47,"author":{"gitId":"lohtianwei"},"content":"            + \"[\" + PREFIX_PHONE + \"]\""},{"lineNumber":48,"author":{"gitId":"lohtianwei"},"content":"            + \"[\" + PREFIX_EMAIL + \"]\""},{"lineNumber":49,"author":{"gitId":"lohtianwei"},"content":"            + \"[\" + PREFIX_REMARK + \"]\""},{"lineNumber":50,"author":{"gitId":"lohtianwei"},"content":"            + \"[\" + PREFIX_RATING + \"]\""},{"lineNumber":51,"author":{"gitId":"lohtianwei"},"content":"            + \"[\" + PREFIX_ADDRESS + \"]\\n\""},{"lineNumber":52,"author":{"gitId":"lohtianwei"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"            + PREFIX_PHONE + \" \""},{"lineNumber":54,"author":{"gitId":"lohtianwei"},"content":"            + PREFIX_EMAIL + \" \""},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":"            + PREFIX_ADDRESS;"},{"lineNumber":56,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":57,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Changed the Privacy of the Person: %1$s\";"},{"lineNumber":58,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":59,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_NO_FIELDS \u003d \"No prefixes were specified!\";"},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":61,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"INDEX \""},{"lineNumber":62,"author":{"gitId":"lohtianwei"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE]\""},{"lineNumber":63,"author":{"gitId":"lohtianwei"},"content":"            + \" [\" + PREFIX_EMAIL + \"EMAIL]\""},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":"            + \" [\" + PREFIX_REMARK + \"REMARK]\""},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":"            + \" [\" + PREFIX_RATING + \"RATING]\""},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":"            + \" [\" + PREFIX_ADDRESS + \"ADDRESS]\";"},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":68,"author":{"gitId":"lohtianwei"},"content":"    private final Index index;"},{"lineNumber":69,"author":{"gitId":"lohtianwei"},"content":"    private final EditPersonPrivacy epp;"},{"lineNumber":70,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":71,"author":{"gitId":"lohtianwei"},"content":"    private Person personToEdit;"},{"lineNumber":72,"author":{"gitId":"lohtianwei"},"content":"    private Person editedPerson;"},{"lineNumber":73,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":74,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"lohtianwei"},"content":"     * @param index of the person in the filtered person list to edit privacy"},{"lineNumber":76,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"lohtianwei"},"content":"    public TogglePrivacyCommand(Index index, EditPersonPrivacy epp) {"},{"lineNumber":78,"author":{"gitId":"lohtianwei"},"content":"        requireNonNull(index);"},{"lineNumber":79,"author":{"gitId":"lohtianwei"},"content":"        requireNonNull(epp);"},{"lineNumber":80,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":81,"author":{"gitId":"lohtianwei"},"content":"        this.index \u003d index;"},{"lineNumber":82,"author":{"gitId":"lohtianwei"},"content":"        this.epp \u003d epp;"},{"lineNumber":83,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":85,"author":{"gitId":"lohtianwei"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"lohtianwei"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":87,"author":{"gitId":"lohtianwei"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":88,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":89,"author":{"gitId":"lohtianwei"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":90,"author":{"gitId":"lohtianwei"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":93,"author":{"gitId":"lohtianwei"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":94,"author":{"gitId":"lohtianwei"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"lohtianwei"},"content":"            editedPerson \u003d createEditedPrivacyPerson(personToEdit, epp);"},{"lineNumber":96,"author":{"gitId":"lohtianwei"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":97,"author":{"gitId":"lohtianwei"},"content":"            throw new AssertionError(\"Person must have all fields!\");"},{"lineNumber":98,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":100,"author":{"gitId":"lohtianwei"},"content":"        try {"},{"lineNumber":101,"author":{"gitId":"lohtianwei"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":102,"author":{"gitId":"lohtianwei"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":103,"author":{"gitId":"lohtianwei"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":104,"author":{"gitId":"lohtianwei"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":105,"author":{"gitId":"lohtianwei"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":106,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"lohtianwei"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":108,"author":{"gitId":"lohtianwei"},"content":"        EventsCenter.getInstance().post(new PersonDetailsChangedEvent(editedPerson, index));"},{"lineNumber":109,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":110,"author":{"gitId":"lohtianwei"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, editedPerson));"},{"lineNumber":111,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":113,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"lohtianwei"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":115,"author":{"gitId":"lohtianwei"},"content":"     * edited with {@code editPersonPrivacy}."},{"lineNumber":116,"author":{"gitId":"lohtianwei"},"content":"     * NOTE: Private fields will not be edited."},{"lineNumber":117,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"lohtianwei"},"content":"    private static Person createEditedPrivacyPerson(Person personToEdit, EditPersonPrivacy epp)"},{"lineNumber":119,"author":{"gitId":"lohtianwei"},"content":"            throws IllegalValueException {"},{"lineNumber":120,"author":{"gitId":"lohtianwei"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":121,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":122,"author":{"gitId":"lohtianwei"},"content":"        Name updatedName \u003d personToEdit.getName();"},{"lineNumber":123,"author":{"gitId":"lohtianwei"},"content":"        Phone updatedPhone \u003d createPhonePrivacy(personToEdit, epp);"},{"lineNumber":124,"author":{"gitId":"lohtianwei"},"content":"        Email updatedEmail \u003d createEmailPrivacy(personToEdit, epp);"},{"lineNumber":125,"author":{"gitId":"lohtianwei"},"content":"        Address updatedAddress \u003d createAddressPrivacy(personToEdit, epp);"},{"lineNumber":126,"author":{"gitId":"lohtianwei"},"content":"        Remark updatedRemark \u003d createRemarkPrivacy(personToEdit, epp);"},{"lineNumber":127,"author":{"gitId":"lohtianwei"},"content":"        TeamName updatedTeamName \u003d personToEdit.getTeamName();"},{"lineNumber":128,"author":{"gitId":"lohtianwei"},"content":"        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"},{"lineNumber":129,"author":{"gitId":"lohtianwei"},"content":"        Rating updatedRating \u003d createRatingPrivacy(personToEdit, epp);"},{"lineNumber":130,"author":{"gitId":"lohtianwei"},"content":"        Position updatedPosition \u003d personToEdit.getPosition();"},{"lineNumber":131,"author":{"gitId":"lohtianwei"},"content":"        JerseyNumber updatedJerseyNumber \u003d personToEdit.getJerseyNumber();"},{"lineNumber":132,"author":{"gitId":"lohtianwei"},"content":"        Avatar updatedAvatar \u003d personToEdit.getAvatar();"},{"lineNumber":133,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":134,"author":{"gitId":"lohtianwei"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark,"},{"lineNumber":135,"author":{"gitId":"lohtianwei"},"content":"                updatedTeamName, updatedTags, updatedRating, updatedPosition, updatedJerseyNumber, updatedAvatar);"},{"lineNumber":136,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":138,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"lohtianwei"},"content":"     * Creates a new (@code Phone) based on the input (@code Person) and (@code EditPersonPrivacy)"},{"lineNumber":140,"author":{"gitId":"lohtianwei"},"content":"     * @return A (@code Phone) with the same value as that of the (@code Person)\u0027s but with the privacy set to that"},{"lineNumber":141,"author":{"gitId":"lohtianwei"},"content":"     * of the (@code EditPersonPrivacy)"},{"lineNumber":142,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"lohtianwei"},"content":"    private static Phone createPhonePrivacy(Person person, EditPersonPrivacy epp) {"},{"lineNumber":144,"author":{"gitId":"lohtianwei"},"content":"        Phone phone;"},{"lineNumber":145,"author":{"gitId":"lohtianwei"},"content":"        try {"},{"lineNumber":146,"author":{"gitId":"lohtianwei"},"content":"            if (person.getPhone().isPrivate()) {"},{"lineNumber":147,"author":{"gitId":"lohtianwei"},"content":"                person.getPhone().togglePrivacy();"},{"lineNumber":148,"author":{"gitId":"lohtianwei"},"content":"                phone \u003d new Phone(person.getPhone().toString());"},{"lineNumber":149,"author":{"gitId":"lohtianwei"},"content":"                person.getPhone().togglePrivacy();"},{"lineNumber":150,"author":{"gitId":"lohtianwei"},"content":"            } else {"},{"lineNumber":151,"author":{"gitId":"lohtianwei"},"content":"                phone \u003d new Phone(person.getPhone().toString());"},{"lineNumber":152,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":153,"author":{"gitId":"lohtianwei"},"content":"        } catch (Exception e) {"},{"lineNumber":154,"author":{"gitId":"lohtianwei"},"content":"            throw new AssertionError(\"Invalid Phone\");"},{"lineNumber":155,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"lohtianwei"},"content":"        if (epp.getPrivatePhone() !\u003d null) {"},{"lineNumber":157,"author":{"gitId":"lohtianwei"},"content":"            phone.setPrivate(person.getPhone().isPrivate());"},{"lineNumber":158,"author":{"gitId":"lohtianwei"},"content":"            phone.togglePrivacy();"},{"lineNumber":159,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":160,"author":{"gitId":"lohtianwei"},"content":"            phone.setPrivate(person.getPhone().isPrivate());"},{"lineNumber":161,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":163,"author":{"gitId":"lohtianwei"},"content":"        return phone;"},{"lineNumber":164,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":166,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"lohtianwei"},"content":"     * Creates a new (@code Email) based on the input (@code Person) and (@code EditPersonPrivacy)"},{"lineNumber":168,"author":{"gitId":"lohtianwei"},"content":"     * @return A (@code Email) with the same value as that of the (@code Person)\u0027s but with the privacy set to that"},{"lineNumber":169,"author":{"gitId":"lohtianwei"},"content":"     * of the (@code EditPersonPrivacy)"},{"lineNumber":170,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"lohtianwei"},"content":"    private static Email createEmailPrivacy(Person person, EditPersonPrivacy epp) {"},{"lineNumber":172,"author":{"gitId":"lohtianwei"},"content":"        Email email;"},{"lineNumber":173,"author":{"gitId":"lohtianwei"},"content":"        try {"},{"lineNumber":174,"author":{"gitId":"lohtianwei"},"content":"            if (person.getEmail().isPrivate()) {"},{"lineNumber":175,"author":{"gitId":"lohtianwei"},"content":"                person.getEmail().togglePrivacy();"},{"lineNumber":176,"author":{"gitId":"lohtianwei"},"content":"                email \u003d new Email(person.getEmail().toString());"},{"lineNumber":177,"author":{"gitId":"lohtianwei"},"content":"                person.getEmail().togglePrivacy();"},{"lineNumber":178,"author":{"gitId":"lohtianwei"},"content":"            } else {"},{"lineNumber":179,"author":{"gitId":"lohtianwei"},"content":"                email \u003d new Email(person.getEmail().toString());"},{"lineNumber":180,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":181,"author":{"gitId":"lohtianwei"},"content":"        } catch (Exception e) {"},{"lineNumber":182,"author":{"gitId":"lohtianwei"},"content":"            throw new AssertionError(\"Invalid Email\");"},{"lineNumber":183,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"lohtianwei"},"content":"        if (epp.getPrivateEmail() !\u003d null) {"},{"lineNumber":185,"author":{"gitId":"lohtianwei"},"content":"            email.setPrivate(person.getEmail().isPrivate());"},{"lineNumber":186,"author":{"gitId":"lohtianwei"},"content":"            email.togglePrivacy();"},{"lineNumber":187,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":188,"author":{"gitId":"lohtianwei"},"content":"            email.setPrivate(person.getEmail().isPrivate());"},{"lineNumber":189,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"lohtianwei"},"content":"        return email;"},{"lineNumber":191,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":193,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"lohtianwei"},"content":"     * Creates a new (@code Address) based on the input (@code Person) and (@code EditPersonPrivacy)"},{"lineNumber":195,"author":{"gitId":"lohtianwei"},"content":"     * @return A (@code Address) with the same value as that of the (@code Person)\u0027s but with the privacy set to that"},{"lineNumber":196,"author":{"gitId":"lohtianwei"},"content":"     * of the (@code EditPersonPrivacy)"},{"lineNumber":197,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"lohtianwei"},"content":"    private static Address createAddressPrivacy(Person person, EditPersonPrivacy epp) {"},{"lineNumber":199,"author":{"gitId":"lohtianwei"},"content":"        Address address;"},{"lineNumber":200,"author":{"gitId":"lohtianwei"},"content":"        try {"},{"lineNumber":201,"author":{"gitId":"lohtianwei"},"content":"            if (person.getAddress().isPrivate()) {"},{"lineNumber":202,"author":{"gitId":"lohtianwei"},"content":"                person.getAddress().togglePrivacy();"},{"lineNumber":203,"author":{"gitId":"lohtianwei"},"content":"                address \u003d new Address(person.getAddress().toString());"},{"lineNumber":204,"author":{"gitId":"lohtianwei"},"content":"                person.getAddress().togglePrivacy();"},{"lineNumber":205,"author":{"gitId":"lohtianwei"},"content":"            } else {"},{"lineNumber":206,"author":{"gitId":"lohtianwei"},"content":"                address \u003d new Address(person.getAddress().toString());"},{"lineNumber":207,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":208,"author":{"gitId":"lohtianwei"},"content":"        } catch (Exception e) {"},{"lineNumber":209,"author":{"gitId":"lohtianwei"},"content":"            throw new AssertionError(\"Invalid Address\");"},{"lineNumber":210,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":211,"author":{"gitId":"lohtianwei"},"content":"        if (epp.getPrivateAddress() !\u003d null) {"},{"lineNumber":212,"author":{"gitId":"lohtianwei"},"content":"            address.setPrivate(person.getAddress().isPrivate());"},{"lineNumber":213,"author":{"gitId":"lohtianwei"},"content":"            address.togglePrivacy();"},{"lineNumber":214,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":215,"author":{"gitId":"lohtianwei"},"content":"            address.setPrivate(person.getAddress().isPrivate());"},{"lineNumber":216,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"lohtianwei"},"content":"        return address;"},{"lineNumber":218,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":220,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":221,"author":{"gitId":"lohtianwei"},"content":"     * Creates a new (@code Remark) based on the input (@code Person) and (@code EditPersonPrivacy)"},{"lineNumber":222,"author":{"gitId":"lohtianwei"},"content":"     * @return A (@code Remark) with the same value as that of the (@code Person)\u0027s but with the privacy set to that"},{"lineNumber":223,"author":{"gitId":"lohtianwei"},"content":"     * of the (@code EditPersonPrivacy)"},{"lineNumber":224,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":225,"author":{"gitId":"lohtianwei"},"content":"    private static Remark createRemarkPrivacy(Person person, EditPersonPrivacy epp) {"},{"lineNumber":226,"author":{"gitId":"lohtianwei"},"content":"        Remark remark;"},{"lineNumber":227,"author":{"gitId":"lohtianwei"},"content":"        try {"},{"lineNumber":228,"author":{"gitId":"lohtianwei"},"content":"            if (person.getRemark().isPrivate()) {"},{"lineNumber":229,"author":{"gitId":"lohtianwei"},"content":"                person.getRemark().togglePrivacy();"},{"lineNumber":230,"author":{"gitId":"lohtianwei"},"content":"                remark \u003d new Remark(person.getRemark().toString());"},{"lineNumber":231,"author":{"gitId":"lohtianwei"},"content":"                person.getRemark().togglePrivacy();"},{"lineNumber":232,"author":{"gitId":"lohtianwei"},"content":"            } else {"},{"lineNumber":233,"author":{"gitId":"lohtianwei"},"content":"                remark \u003d new Remark(person.getRemark().toString());"},{"lineNumber":234,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":235,"author":{"gitId":"lohtianwei"},"content":"        } catch (Exception e) {"},{"lineNumber":236,"author":{"gitId":"lohtianwei"},"content":"            throw new AssertionError(\"Invalid Remark\");"},{"lineNumber":237,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"lohtianwei"},"content":"        if (epp.getPrivateRemark() !\u003d null) {"},{"lineNumber":239,"author":{"gitId":"lohtianwei"},"content":"            remark.setPrivate(person.getRemark().isPrivate());"},{"lineNumber":240,"author":{"gitId":"lohtianwei"},"content":"            remark.togglePrivacy();"},{"lineNumber":241,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":242,"author":{"gitId":"lohtianwei"},"content":"            remark.setPrivate(person.getRemark().isPrivate());"},{"lineNumber":243,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":244,"author":{"gitId":"lohtianwei"},"content":"        return remark;"},{"lineNumber":245,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":247,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":248,"author":{"gitId":"lohtianwei"},"content":"     * Creates a new (@code Rating) based on the input (@code Person) and (@code EditPersonPrivacy)"},{"lineNumber":249,"author":{"gitId":"lohtianwei"},"content":"     * @return A (@code Rating) with the same value as that of the (@code Person)\u0027s but with the privacy set to that"},{"lineNumber":250,"author":{"gitId":"lohtianwei"},"content":"     * of the (@code EditPersonPrivacy)"},{"lineNumber":251,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":252,"author":{"gitId":"lohtianwei"},"content":"    private static Rating createRatingPrivacy(Person person, EditPersonPrivacy epp) {"},{"lineNumber":253,"author":{"gitId":"lohtianwei"},"content":"        Rating rating;"},{"lineNumber":254,"author":{"gitId":"lohtianwei"},"content":"        try {"},{"lineNumber":255,"author":{"gitId":"lohtianwei"},"content":"            if (person.getRating().isPrivate()) {"},{"lineNumber":256,"author":{"gitId":"lohtianwei"},"content":"                person.getRating().togglePrivacy();"},{"lineNumber":257,"author":{"gitId":"lohtianwei"},"content":"                rating \u003d new Rating(person.getRating().toString());"},{"lineNumber":258,"author":{"gitId":"lohtianwei"},"content":"                person.getRating().togglePrivacy();"},{"lineNumber":259,"author":{"gitId":"lohtianwei"},"content":"            } else {"},{"lineNumber":260,"author":{"gitId":"lohtianwei"},"content":"                rating \u003d new Rating(person.getRating().toString());"},{"lineNumber":261,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":262,"author":{"gitId":"lohtianwei"},"content":"        } catch (Exception e) {"},{"lineNumber":263,"author":{"gitId":"lohtianwei"},"content":"            throw new AssertionError(\"Invalid Rating\");"},{"lineNumber":264,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"lohtianwei"},"content":"        if (epp.getPrivateRating() !\u003d null) {"},{"lineNumber":266,"author":{"gitId":"lohtianwei"},"content":"            rating.setPrivate(person.getRating().isPrivate());"},{"lineNumber":267,"author":{"gitId":"lohtianwei"},"content":"            rating.togglePrivacy();"},{"lineNumber":268,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":269,"author":{"gitId":"lohtianwei"},"content":"            rating.setPrivate(person.getRating().isPrivate());"},{"lineNumber":270,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":271,"author":{"gitId":"lohtianwei"},"content":"        return rating;"},{"lineNumber":272,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":273,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":274,"author":{"gitId":"lohtianwei"},"content":"    public Index getIndex() {"},{"lineNumber":275,"author":{"gitId":"lohtianwei"},"content":"        return index;"},{"lineNumber":276,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":277,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":278,"author":{"gitId":"lohtianwei"},"content":"    public EditPersonPrivacy getEpp() {"},{"lineNumber":279,"author":{"gitId":"lohtianwei"},"content":"        return epp;"},{"lineNumber":280,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":281,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":282,"author":{"gitId":"lohtianwei"},"content":"    @Override"},{"lineNumber":283,"author":{"gitId":"lohtianwei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":284,"author":{"gitId":"lohtianwei"},"content":"        // short circuit if same object"},{"lineNumber":285,"author":{"gitId":"lohtianwei"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":286,"author":{"gitId":"lohtianwei"},"content":"            return true;"},{"lineNumber":287,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":288,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":289,"author":{"gitId":"lohtianwei"},"content":"        // instanceof handles nulls"},{"lineNumber":290,"author":{"gitId":"lohtianwei"},"content":"        if (!(other instanceof TogglePrivacyCommand)) {"},{"lineNumber":291,"author":{"gitId":"lohtianwei"},"content":"            return false;"},{"lineNumber":292,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":293,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":294,"author":{"gitId":"lohtianwei"},"content":"        // state check"},{"lineNumber":295,"author":{"gitId":"lohtianwei"},"content":"        TogglePrivacyCommand e \u003d (TogglePrivacyCommand) other;"},{"lineNumber":296,"author":{"gitId":"lohtianwei"},"content":"        return index.equals(e.index)"},{"lineNumber":297,"author":{"gitId":"lohtianwei"},"content":"                \u0026\u0026 epp.equals(e.epp);"},{"lineNumber":298,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":300,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":301,"author":{"gitId":"lohtianwei"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":302,"author":{"gitId":"lohtianwei"},"content":"     * corresponding field value of the person."},{"lineNumber":303,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":304,"author":{"gitId":"lohtianwei"},"content":"    public static class EditPersonPrivacy {"},{"lineNumber":305,"author":{"gitId":"lohtianwei"},"content":"        private Boolean privatePhone;"},{"lineNumber":306,"author":{"gitId":"lohtianwei"},"content":"        private Boolean privateEmail;"},{"lineNumber":307,"author":{"gitId":"lohtianwei"},"content":"        private Boolean privateAddress;"},{"lineNumber":308,"author":{"gitId":"lohtianwei"},"content":"        private Boolean privateRemark;"},{"lineNumber":309,"author":{"gitId":"lohtianwei"},"content":"        private Boolean privateRating;"},{"lineNumber":310,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":311,"author":{"gitId":"lohtianwei"},"content":"        public EditPersonPrivacy() {}"},{"lineNumber":312,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":313,"author":{"gitId":"lohtianwei"},"content":"        /**"},{"lineNumber":314,"author":{"gitId":"lohtianwei"},"content":"         * Copy constructor."},{"lineNumber":315,"author":{"gitId":"lohtianwei"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":316,"author":{"gitId":"lohtianwei"},"content":"         */"},{"lineNumber":317,"author":{"gitId":"lohtianwei"},"content":"        public EditPersonPrivacy (EditPersonPrivacy toCopy) {"},{"lineNumber":318,"author":{"gitId":"lohtianwei"},"content":"            this.privateAddress \u003d toCopy.privateAddress;"},{"lineNumber":319,"author":{"gitId":"lohtianwei"},"content":"            this.privateEmail \u003d toCopy.privateEmail;"},{"lineNumber":320,"author":{"gitId":"lohtianwei"},"content":"            this.privatePhone \u003d toCopy.privatePhone;"},{"lineNumber":321,"author":{"gitId":"lohtianwei"},"content":"            this.privateRemark \u003d toCopy.privateRemark;"},{"lineNumber":322,"author":{"gitId":"lohtianwei"},"content":"            this.privateRating \u003d toCopy.privateRating;"},{"lineNumber":323,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":324,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":325,"author":{"gitId":"lohtianwei"},"content":"        public void setPrivatePhone(boolean privatePhone) {"},{"lineNumber":326,"author":{"gitId":"lohtianwei"},"content":"            this.privatePhone \u003d privatePhone;"},{"lineNumber":327,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":328,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":329,"author":{"gitId":"lohtianwei"},"content":"        public Boolean getPrivatePhone() {"},{"lineNumber":330,"author":{"gitId":"lohtianwei"},"content":"            return privatePhone;"},{"lineNumber":331,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":332,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":333,"author":{"gitId":"lohtianwei"},"content":"        public void setPrivateEmail(boolean privateEmail) {"},{"lineNumber":334,"author":{"gitId":"lohtianwei"},"content":"            this.privateEmail \u003d privateEmail;"},{"lineNumber":335,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":336,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":337,"author":{"gitId":"lohtianwei"},"content":"        public Boolean getPrivateEmail() {"},{"lineNumber":338,"author":{"gitId":"lohtianwei"},"content":"            return privateEmail;"},{"lineNumber":339,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":340,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":341,"author":{"gitId":"lohtianwei"},"content":"        public void setPrivateAddress(boolean privateAddress) {"},{"lineNumber":342,"author":{"gitId":"lohtianwei"},"content":"            this.privateAddress \u003d privateAddress;"},{"lineNumber":343,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":344,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":345,"author":{"gitId":"lohtianwei"},"content":"        public Boolean getPrivateAddress() {"},{"lineNumber":346,"author":{"gitId":"lohtianwei"},"content":"            return privateAddress;"},{"lineNumber":347,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":348,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":349,"author":{"gitId":"lohtianwei"},"content":"        public void setPrivateRemark(boolean privateRemark) {"},{"lineNumber":350,"author":{"gitId":"lohtianwei"},"content":"            this.privateRemark \u003d privateRemark;"},{"lineNumber":351,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":352,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":353,"author":{"gitId":"lohtianwei"},"content":"        public Boolean getPrivateRemark() {"},{"lineNumber":354,"author":{"gitId":"lohtianwei"},"content":"            return privateRemark;"},{"lineNumber":355,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":356,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":357,"author":{"gitId":"lohtianwei"},"content":"        public void setPrivateRating(boolean privateRating) {"},{"lineNumber":358,"author":{"gitId":"lohtianwei"},"content":"            this.privateRating \u003d privateRating;"},{"lineNumber":359,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":360,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":361,"author":{"gitId":"lohtianwei"},"content":"        public Boolean getPrivateRating() {"},{"lineNumber":362,"author":{"gitId":"lohtianwei"},"content":"            return privateRating;"},{"lineNumber":363,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":364,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":365,"author":{"gitId":"lohtianwei"},"content":"        /**"},{"lineNumber":366,"author":{"gitId":"lohtianwei"},"content":"         *"},{"lineNumber":367,"author":{"gitId":"lohtianwei"},"content":"         * @return true if at least one field is not null"},{"lineNumber":368,"author":{"gitId":"lohtianwei"},"content":"         */"},{"lineNumber":369,"author":{"gitId":"lohtianwei"},"content":"        public boolean anyNonNullField() {"},{"lineNumber":370,"author":{"gitId":"lohtianwei"},"content":"            return CollectionUtil.isAnyNonNull(this.privateAddress, this.privateEmail, this.privatePhone,"},{"lineNumber":371,"author":{"gitId":"lohtianwei"},"content":"                    this.privateRating, this.privateRemark);"},{"lineNumber":372,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":373,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":374,"author":{"gitId":"lohtianwei"},"content":"        @Override"},{"lineNumber":375,"author":{"gitId":"lohtianwei"},"content":"        public boolean equals(Object other) {"},{"lineNumber":376,"author":{"gitId":"lohtianwei"},"content":"            // short circuit if same object"},{"lineNumber":377,"author":{"gitId":"lohtianwei"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":378,"author":{"gitId":"lohtianwei"},"content":"                return true;"},{"lineNumber":379,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":380,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":381,"author":{"gitId":"lohtianwei"},"content":"            // instanceof handles nulls"},{"lineNumber":382,"author":{"gitId":"lohtianwei"},"content":"            if (!(other instanceof EditPersonPrivacy)) {"},{"lineNumber":383,"author":{"gitId":"lohtianwei"},"content":"                return false;"},{"lineNumber":384,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":385,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":386,"author":{"gitId":"lohtianwei"},"content":"            // state check"},{"lineNumber":387,"author":{"gitId":"lohtianwei"},"content":"            EditPersonPrivacy e \u003d (EditPersonPrivacy) other;"},{"lineNumber":388,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":389,"author":{"gitId":"lohtianwei"},"content":"            return getPrivatePhone().equals(e.getPrivatePhone())"},{"lineNumber":390,"author":{"gitId":"lohtianwei"},"content":"                    \u0026\u0026 getPrivateAddress().equals(e.getPrivateAddress())"},{"lineNumber":391,"author":{"gitId":"lohtianwei"},"content":"                    \u0026\u0026 getPrivateEmail().equals(e.getPrivateEmail())"},{"lineNumber":392,"author":{"gitId":"lohtianwei"},"content":"                    \u0026\u0026 getPrivateRemark().equals(e.getPrivateRemark())"},{"lineNumber":393,"author":{"gitId":"lohtianwei"},"content":"                    \u0026\u0026 getPrivateRating().equals(e.getPrivateRating());"},{"lineNumber":394,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":395,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":396,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":394,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.PersonDetailsChangedNoParamEvent;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.UndoTeamsEvent;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // @@author Codee"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().post(new UndoTeamsEvent());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().post(new PersonDetailsChangedNoParamEvent());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // @@author"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":1,"codeeong":3,"-":40}},{"path":"src/main/java/seedu/address/logic/commands/ViewCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.HighlightSelectedTeamEvent;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.team.exceptions.TeamNotFoundException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"//@@author jordancjq"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * View a team identified using it\u0027s team name from the address book."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ViewCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"view\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"vt\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \": Views the team identified by the team name.\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: TEAM_NAME\\n\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" Arsenal\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"TEAM_NAME\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_VIEW_TEAM_SUCCESS \u003d \"Viewing Team: %1$s\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final TeamName targetTeam;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public ViewCommand(TeamName targetTeam) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(targetTeam);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.targetTeam \u003d targetTeam;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            EventsCenter.getInstance().post(new HighlightSelectedTeamEvent(targetTeam.toString()));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            model.updateFilteredPersonList(targetTeam);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (TeamNotFoundException tnfe) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_TEAM_NOT_FOUND);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_VIEW_TEAM_SUCCESS, targetTeam.toString()));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof ViewCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.targetTeam.equals(((ViewCommand) other).targetTeam)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":2,"-":51}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AssignCommand;"},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CreateCommand;"},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.KeyCommand;"},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RenameCommand;"},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":28,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.commands.SetCommand;"},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.TogglePrivacyCommand;"},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":37,"author":{"gitId":"-"},"content":" */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"lohtianwei"},"content":"    public static final String MESSAGE_RESTRICTED \u003d \"Not allowed! Please unlock MTM before execution.\\n\""},{"lineNumber":41,"author":{"gitId":"lohtianwei"},"content":"            + KeyCommand.MESSAGE_USAGE;"},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":"    public Command parseCommand(String userInput, boolean lockState) throws ParseException {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":63,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":"        Command res \u003d lowLevelCommand(commandWord, arguments);"},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":"        if (res !\u003d null) {"},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":"            return res;"},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":69,"author":{"gitId":"lohtianwei"},"content":"        if (lockState) {"},{"lineNumber":70,"author":{"gitId":"lohtianwei"},"content":"            throw new ParseException(MESSAGE_RESTRICTED);"},{"lineNumber":71,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitId":"lohtianwei"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":80,"author":{"gitId":"lohtianwei"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitId":"lohtianwei"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitId":"lohtianwei"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitId":"lohtianwei"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        case RemarkCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        case RemarkCommand.COMMAND_ALIAS:"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return new RemarkCommandParser().parse(arguments);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitId":"lohtianwei"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        case CreateCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        case CreateCommand.COMMAND_ALIAS:"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            return new CreateCommandParser().parse(arguments);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        case RemoveCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        case RemoveCommand.COMMAND_ALIAS:"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            return new RemoveCommandParser().parse(arguments);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        case AssignCommand.COMMAND_WORD:"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        case AssignCommand.COMMAND_ALIAS:"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            return new AssignCommandParser().parse(arguments);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        case RenameCommand.COMMAND_WORD:"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        case RenameCommand.COMMAND_ALIAS:"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return new RenameCommandParser().parse(arguments);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":120,"author":{"gitId":"lohtianwei"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return new UndoCommand();"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":124,"author":{"gitId":"lohtianwei"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return new RedoCommand();"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"codeeong"},"content":"        case SetCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitId":"codeeong"},"content":"        case SetCommand.COMMAND_ALIAS:"},{"lineNumber":129,"author":{"gitId":"codeeong"},"content":"            return new SetCommandParser().parse(arguments);"},{"lineNumber":130,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        case TogglePrivacyCommand.COMMAND_WORD:"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        case TogglePrivacyCommand.COMMAND_ALIAS:"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            return new TogglePrivacyCommandParser().parse(arguments);"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"lohtianwei"},"content":"    //@@author lohtianwei"},{"lineNumber":140,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"lohtianwei"},"content":"     * Checks for low level command words or aliases that do not violate restriction of a locked MTM."},{"lineNumber":142,"author":{"gitId":"lohtianwei"},"content":"     * Else, control is returned back to original parseCommand method."},{"lineNumber":143,"author":{"gitId":"lohtianwei"},"content":"     * @param commandWord"},{"lineNumber":144,"author":{"gitId":"lohtianwei"},"content":"     * @param arguments"},{"lineNumber":145,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"lohtianwei"},"content":"    private Command lowLevelCommand(String commandWord, String arguments) throws ParseException {"},{"lineNumber":147,"author":{"gitId":"lohtianwei"},"content":"        switch(commandWord) {"},{"lineNumber":148,"author":{"gitId":"lohtianwei"},"content":"        case ChangeThemeCommand.COMMAND_WORD:"},{"lineNumber":149,"author":{"gitId":"lohtianwei"},"content":"        case ChangeThemeCommand.COMMAND_ALIAS:"},{"lineNumber":150,"author":{"gitId":"lohtianwei"},"content":"            return new ChangeThemeCommandParser().parse(arguments);"},{"lineNumber":151,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":152,"author":{"gitId":"lohtianwei"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":153,"author":{"gitId":"lohtianwei"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":154,"author":{"gitId":"lohtianwei"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":155,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":156,"author":{"gitId":"lohtianwei"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":157,"author":{"gitId":"lohtianwei"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":158,"author":{"gitId":"lohtianwei"},"content":"            return new ListCommand();"},{"lineNumber":159,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":160,"author":{"gitId":"lohtianwei"},"content":"        case KeyCommand.COMMAND_WORD:"},{"lineNumber":161,"author":{"gitId":"lohtianwei"},"content":"        case KeyCommand.COMMAND_ALIAS:"},{"lineNumber":162,"author":{"gitId":"lohtianwei"},"content":"            return new KeyCommandParser().parse(arguments);"},{"lineNumber":163,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":164,"author":{"gitId":"lohtianwei"},"content":"        case ViewCommand.COMMAND_WORD:"},{"lineNumber":165,"author":{"gitId":"lohtianwei"},"content":"        case ViewCommand.COMMAND_ALIAS:"},{"lineNumber":166,"author":{"gitId":"lohtianwei"},"content":"            return new ViewCommandParser().parse(arguments);"},{"lineNumber":167,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":168,"author":{"gitId":"lohtianwei"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":169,"author":{"gitId":"lohtianwei"},"content":"            return new ExitCommand();"},{"lineNumber":170,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":171,"author":{"gitId":"lohtianwei"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":172,"author":{"gitId":"lohtianwei"},"content":"            return new HelpCommand();"},{"lineNumber":173,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":174,"author":{"gitId":"lohtianwei"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":175,"author":{"gitId":"lohtianwei"},"content":"        case SortCommand.COMMAND_ALIAS:"},{"lineNumber":176,"author":{"gitId":"lohtianwei"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":177,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":178,"author":{"gitId":"lohtianwei"},"content":"        default:"},{"lineNumber":179,"author":{"gitId":"lohtianwei"},"content":"            return null;"},{"lineNumber":180,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":183,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":82,"codeeong":6,"-":95}},{"path":"src/main/java/seedu/address/logic/parser/ChangeThemeCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.commands.ChangeThemeCommand.MESSAGE_USAGE;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":" * Parses input arguments and creates a new ThemeCommand object."},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ChangeThemeCommandParser implements Parser\u003cChangeThemeCommand\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Parses the given (@code String) in the context of a ThemeCommand."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @return ThemeCommand Object for execution"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public ChangeThemeCommand parse(String userInput) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        if (userInput.length() \u003d\u003d 0) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new ChangeThemeCommand(userInput);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":11,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":15,"author":{"gitId":"codeeong"},"content":"    public static final Prefix PREFIX_TAG_COLOUR \u003d new Prefix(\"tc/\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TEAM_NAME \u003d new Prefix(\"tm/\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_RATING \u003d new Prefix(\"ra/\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_JERSEY_NUMBER \u003d new Prefix(\"j/\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_POSITION \u003d new Prefix(\"po/\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_AVATAR \u003d new Prefix(\"av/\");"},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":"    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pw/\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":1,"codeeong":1,"-":21}},{"path":"src/main/java/seedu/address/logic/parser/KeyCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"lohtianwei"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"//@@author lohtianwei"},{"lineNumber":4,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.KeyCommand;"},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"lohtianwei"},"content":" * Parses input and creates KeyCommand object with password provided"},{"lineNumber":11,"author":{"gitId":"lohtianwei"},"content":" */"},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":"public class KeyCommandParser implements Parser\u003cKeyCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"lohtianwei"},"content":"     * Parses the given {@code String} of arguments in the context of the KeyCommand"},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":"     * and returns a KeyCommand object for execution."},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":"    public KeyCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":"        /*if (trimmedArgs.isEmpty()) {"},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, KeyCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":"        }*/"},{"lineNumber":23,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":24,"author":{"gitId":"lohtianwei"},"content":"        String[] argKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":25,"author":{"gitId":"lohtianwei"},"content":"        if (argKeywords.length \u003e 1) {"},{"lineNumber":26,"author":{"gitId":"lohtianwei"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, KeyCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":"        return new KeyCommand(argKeywords[0]);"},{"lineNumber":30,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":31}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":29,"author":{"gitId":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":35,"author":{"gitId":"-"},"content":" */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INPUT \u003d \"You have entered an invalid input.\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String UNSPECIFIED_FIELD \u003d \"\u003cUNSPECIFIED\u003e\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    //@@author jordancjq"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Parses {@code String oneBasedIndexes} into a {@code List\u003cIndex\u003e} and returns it. Leading and trailing"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * whitespaces will be trimmed."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static List\u003cIndex\u003e parseIndexes(String oneBasedIndexes) throws IllegalValueException {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String trimmedIndexes \u003d oneBasedIndexes.trim();"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String[] splitOneBasedIndexes \u003d trimmedIndexes.split(\"\\\\s+\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e uniqueIndexes \u003d new HashSet\u003c\u003e(Arrays.asList(splitOneBasedIndexes));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        for (String index : uniqueIndexes) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            indexList.add(parseIndex(index));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return indexList;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":168,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":177,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * Parses {@code String teamName} into an {@code TeamName}."},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":204,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public static TeamName parseTeamName(String teamName) throws IllegalValueException {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        requireNonNull(teamName);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        String trimmedTeamName \u003d teamName.trim();"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        if (!TeamName.isValidName(trimmedTeamName)) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(TeamName.MESSAGE_TEAM_NAME_CONSTRAINTS);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"        return new TeamName(trimmedTeamName);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e teamName} into an {@code Optional\u003cTeamName\u003e} if {@code teamName} is present."},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":218,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public static Optional\u003cTeamName\u003e parseTeamName(Optional\u003cString\u003e teamName) throws IllegalValueException {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        requireNonNull(teamName);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        return teamName.isPresent() ? Optional.of(parseTeamName(teamName.get())) : Optional.empty();"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"    //@@author jordancjq"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e value} into the specified value or {@code UNSPECIFIED_FIELD} if is empty"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    public static Optional\u003cString\u003e parseValue(Optional\u003cString\u003e value, String messageConstraints)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            throws IllegalValueException {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        if (value.isPresent() \u0026\u0026 value.get().equals(UNSPECIFIED_FIELD)) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(messageConstraints);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            return Optional.of(value.orElse(UNSPECIFIED_FIELD));"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitId":"codeeong"},"content":"     * Parses a {@code String tagColour} into a {@code String ta}."},{"lineNumber":240,"author":{"gitId":"codeeong"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":241,"author":{"gitId":"codeeong"},"content":"     *"},{"lineNumber":242,"author":{"gitId":"codeeong"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":243,"author":{"gitId":"codeeong"},"content":"     */"},{"lineNumber":244,"author":{"gitId":"codeeong"},"content":"    public static String parseTagColour(String tagColour) throws IllegalValueException {"},{"lineNumber":245,"author":{"gitId":"codeeong"},"content":"        requireNonNull(tagColour);"},{"lineNumber":246,"author":{"gitId":"codeeong"},"content":"        String trimmedTagColour \u003d tagColour.trim();"},{"lineNumber":247,"author":{"gitId":"codeeong"},"content":"        if (!trimmedTagColour.getClass().equals(String.class) ||  (trimmedTagColour.contains(\" \"))) {"},{"lineNumber":248,"author":{"gitId":"codeeong"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_COLOUR_CONSTRAINTS);"},{"lineNumber":249,"author":{"gitId":"codeeong"},"content":"        }"},{"lineNumber":250,"author":{"gitId":"codeeong"},"content":"        return trimmedTagColour;"},{"lineNumber":251,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitId":"-"},"content":"     * Parses a {@code String rating} into a {@code Phone}."},{"lineNumber":255,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":256,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":257,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the given {@code rating} is invalid."},{"lineNumber":258,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    public static Rating parseRating(String rating) throws IllegalValueException {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        requireNonNull(rating);"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        String trimmedRating \u003d rating.trim();"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        if (!Rating.isValidRating(trimmedRating)) {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        return new Rating(trimmedRating);"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":269,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e rating} into an {@code Optional\u003cRating\u003e} if {@code rating} is present."},{"lineNumber":270,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":271,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    public static Optional\u003cRating\u003e parseRating(Optional\u003cString\u003e rating) throws IllegalValueException {"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        requireNonNull(rating);"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        return rating.isPresent() ? Optional.of(parseRating(rating.get())) : Optional.empty();"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":278,"author":{"gitId":"-"},"content":"     * Parses a {@code String position} into a {@code Position}."},{"lineNumber":279,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":280,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":281,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the given {@code position} is invalid."},{"lineNumber":282,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    public static Position parsePosition(String position) throws IllegalValueException {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        requireNonNull(position);"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        String trimmedPosition \u003d position.trim();"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        if (!Position.isValidPosition(trimmedPosition)) {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Position.MESSAGE_POSITION_CONSTRAINTS);"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        return new Position(trimmedPosition);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e position} into an {@code Optional\u003cPosition\u003e} if {@code position} is present."},{"lineNumber":294,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":295,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    public static Optional\u003cPosition\u003e parsePosition(Optional\u003cString\u003e position) throws IllegalValueException {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        requireNonNull(position);"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        return position.isPresent() ? Optional.of(parsePosition(position.get())) : Optional.empty();"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":302,"author":{"gitId":"-"},"content":"     * Parses a {@code String jerseyNumber} into a {@code JerseyNumber}."},{"lineNumber":303,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":304,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":305,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the given {@code jerseyNumber} is invalid."},{"lineNumber":306,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    public static JerseyNumber parseJerseyNumber(String jerseyNumber) throws IllegalValueException {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        requireNonNull(jerseyNumber);"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        String trimmedJerseyNumber \u003d jerseyNumber.trim();"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        if (!JerseyNumber.isValidJerseyNumber(trimmedJerseyNumber)) {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(JerseyNumber.MESSAGE_JERSEY_NUMBER_CONSTRAINTS);"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        return new JerseyNumber(trimmedJerseyNumber);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":317,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e jerseyNumber} into an {@code Optional\u003cJerseyNumber\u003e}"},{"lineNumber":318,"author":{"gitId":"-"},"content":"     * if {@code jerseyNumber} is present."},{"lineNumber":319,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":320,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    public static Optional\u003cJerseyNumber\u003e parseJerseyNumber(Optional\u003cString\u003e jerseyNumber) throws IllegalValueException {"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        requireNonNull(jerseyNumber);"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        return jerseyNumber.isPresent() ? Optional.of(parseJerseyNumber(jerseyNumber.get())) : Optional.empty();"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":327,"author":{"gitId":"-"},"content":"     * Parses a {@code String jerseyNumber} into a {@code JerseyNumber}."},{"lineNumber":328,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":329,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":330,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the given {@code jerseyNumber} is invalid."},{"lineNumber":331,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":332,"author":{"gitId":"-"},"content":""},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static Avatar parseAvatar(String avatar) throws IllegalValueException {"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        requireNonNull(avatar);"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        String trimmedAvatar \u003d avatar.trim();"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        if (!Avatar.isValidAvatar(trimmedAvatar)) {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Avatar.MESSAGE_AVATAR_CONSTRAINTS);"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        return new Avatar(trimmedAvatar);"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":343,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e avatar} into an {@code Optional\u003cAvatar\u003e}"},{"lineNumber":344,"author":{"gitId":"-"},"content":"     * if {@code avatar} is present."},{"lineNumber":345,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":346,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    public static Optional\u003cAvatar\u003e parseAvatar(Optional\u003cString\u003e avatar) throws IllegalValueException {"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        requireNonNull(avatar);"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        return avatar.isPresent() ? Optional.of(parseAvatar(avatar.get())) : Optional.empty();"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":351,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":13,"-":338}},{"path":"src/main/java/seedu/address/logic/parser/SetCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_COLOUR;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.commands.SetCommand;"},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":14,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"codeeong"},"content":" * This class is to check whether Set Command was input correctly"},{"lineNumber":16,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class SetCommandParser implements Parser\u003cSetCommand\u003e {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the SetCommand"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * and returns an SetCommand object for execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public SetCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TAG, PREFIX_TAG_COLOUR);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TAG, PREFIX_TAG_COLOUR)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            String colour \u003d ParserUtil.parseTagColour(argMultimap.getValue(PREFIX_TAG_COLOUR).get());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            if (!tag.isValidTagColour(colour)) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                throw new ParseException("},{"lineNumber":40,"author":{"gitId":"-"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            return new SetCommand(tag, colour);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":45,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":16,"-":40}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"lohtianwei"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"//@@author lohtianwei"},{"lineNumber":4,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":10,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":11,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":13,"author":{"gitId":"lohtianwei"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"lohtianwei"},"content":" * Parses input arguments and creates a new SortCommand object with field and order parameters provided"},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":" */"},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":17,"author":{"gitId":"lohtianwei"},"content":"    public static final List\u003cString\u003e ACCEPTED_FIELDS \u003d new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":"            \"name\", \"email\", \"address\", \"rating\", \"jersey\", \"pos\"));"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"    public static final List\u003cString\u003e ACCEPTED_ORDERS \u003d new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":"            \"asc\", \"desc\"));"},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"lohtianwei"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitId":"lohtianwei"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitId":"lohtianwei"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":26,"author":{"gitId":"lohtianwei"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":"        //eliminates spaces"},{"lineNumber":30,"author":{"gitId":"lohtianwei"},"content":"        String[] argKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":"        //accounts for caps entries"},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":"        for (int i \u003d 0; i \u003c argKeywords.length; i++) {"},{"lineNumber":34,"author":{"gitId":"lohtianwei"},"content":"            argKeywords[i] \u003d argKeywords[i].toLowerCase();"},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":"        if (argKeywords.length !\u003d 2) {"},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":41,"author":{"gitId":"lohtianwei"},"content":"        if (!ACCEPTED_FIELDS.contains(argKeywords[0])) {"},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":45,"author":{"gitId":"lohtianwei"},"content":"        if (!ACCEPTED_ORDERS.contains(argKeywords[1])) {"},{"lineNumber":46,"author":{"gitId":"lohtianwei"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":49,"author":{"gitId":"lohtianwei"},"content":"        return new SortCommand(argKeywords[0], argKeywords[1]);"},{"lineNumber":50,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":51}},{"path":"src/main/java/seedu/address/logic/parser/TogglePrivacyCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"//@@author lohtianwei"},{"lineNumber":4,"author":{"gitId":"lohtianwei"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":10,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":11,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.TogglePrivacyCommand;"},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.TogglePrivacyCommand.EditPersonPrivacy;"},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":" * Parses input arguments and creates a new TogglePrivacyCommand object"},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":" */"},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":"public class TogglePrivacyCommandParser implements Parser\u003cTogglePrivacyCommand\u003e {"},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":23,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"lohtianwei"},"content":"     * Parses the given {@code String} of arguments in the context of the TogglePrivacyCommand"},{"lineNumber":25,"author":{"gitId":"lohtianwei"},"content":"     * and returns an TogglePrivacyCommand object for execution."},{"lineNumber":26,"author":{"gitId":"lohtianwei"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"lohtianwei"},"content":"    public TogglePrivacyCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":"        requireNonNull(args);"},{"lineNumber":30,"author":{"gitId":"lohtianwei"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":"                ArgumentTokenizer.tokenize(args,"},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":"                        PREFIX_REMARK, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_RATING);"},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":34,"author":{"gitId":"lohtianwei"},"content":"        Index index;"},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":36,"author":{"gitId":"lohtianwei"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitId":"lohtianwei"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TogglePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":"        EditPersonPrivacy epp \u003d new EditPersonPrivacy();"},{"lineNumber":43,"author":{"gitId":"lohtianwei"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":44,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivatePhone(false);"},{"lineNumber":45,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":47,"author":{"gitId":"lohtianwei"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":48,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivateAddress(false);"},{"lineNumber":49,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":51,"author":{"gitId":"lohtianwei"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":52,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivateEmail(false);"},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":"        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"},{"lineNumber":56,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivateRemark(false);"},{"lineNumber":57,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":59,"author":{"gitId":"lohtianwei"},"content":"        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivateRating(false);"},{"lineNumber":61,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":63,"author":{"gitId":"lohtianwei"},"content":"        if (!epp.anyNonNullField()) {"},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":"            throw new ParseException(TogglePrivacyCommand.MESSAGE_NO_FIELDS);"},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":"        return new TogglePrivacyCommand(index, epp);"},{"lineNumber":68,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":67,"-":2}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.exceptions.NoPlayerException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.team.UniqueTeamList;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.team.exceptions.DuplicateTeamException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.team.exceptions.TeamNotFoundException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final UniqueTeamList teams;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        teams \u003d new UniqueTeamList();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public AddressBook() {}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setTeams(List\u003cTeam\u003e teams) throws DuplicateTeamException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.teams.setTeams(teams);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        List\u003cTeam\u003e syncedTeamList \u003d newData.getTeamList();"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            setTeams(syncedTeamList);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        } catch (DuplicateTeamException e) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"MTM should not have duplicate teams\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //// person-level operations"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // in the person list."},{"lineNumber":111,"author":{"gitId":"-"},"content":"        persons.add(person);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     *      another existing person in the list."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // in the person list."},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (!editedPerson.getTeamName().toString().equals(UNSPECIFIED_FIELD)) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            teams.getTeam(editedPerson.getTeamName()).setPerson(target, editedPerson);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        removeUnusedTags();"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"lohtianwei"},"content":"    //@@author lohtianwei"},{"lineNumber":140,"author":{"gitId":"lohtianwei"},"content":"    public void sortPlayersBy(String field, String order) throws NoPlayerException {"},{"lineNumber":141,"author":{"gitId":"lohtianwei"},"content":"        persons.sortBy(field, order);"},{"lineNumber":142,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":144,"author":{"gitId":"lohtianwei"},"content":"    //@@author"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":147,"author":{"gitId":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     *  list."},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // used for checking person tag references"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":160,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        return new Person("},{"lineNumber":163,"author":{"gitId":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), person.getRemark(),"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                person.getTeamName(), correctTagReferences, person.getRating(), person.getPosition(),"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                person.getJerseyNumber(), person.getAvatar());"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":171,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    //// tag-level operations"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        tags.add(t);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"codeeong"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"codeeong"},"content":"     *"},{"lineNumber":188,"author":{"gitId":"codeeong"},"content":"     * Sets the colour of {@code tag}."},{"lineNumber":189,"author":{"gitId":"codeeong"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    /** @@author Codee */"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public void setTagColour(Tag tag, String colour) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        for (Tag t : tags) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            if (t.getTagName().equals(tag.getTagName())) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                t.changeTagColour(colour);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * Removes {@code tag} from all persons in this {@code AddressBook}."},{"lineNumber":203,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            for (Person person : persons) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"                removeTagFromPerson(tag, person);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Impossible: AddressBook should contain this person\");"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Removes {@code tag} from {@code person} in this {@code AddressBook}."},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if the {@code person} is not in this {@code AddressBook}."},{"lineNumber":217,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    private void removeTagFromPerson(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"        if (!newTags.remove(tag)) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        Person newPerson \u003d"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                        person.getRemark(), person.getTeamName(), newTags, person.getRating(), person.getPosition(),"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                        person.getJerseyNumber(), person.getAvatar());"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            updatePerson(person, newPerson);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"AddressBook should not have duplicate person \""},{"lineNumber":234,"author":{"gitId":"-"},"content":"                    + \"after updating person\u0027s tag.\");"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitId":"-"},"content":"     * Removes all {@code tag} that are not in used by any {@code Person} in this {@code AddressBook}."},{"lineNumber":240,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    private void removeUnusedTags() {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream()"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                .map(Person::getTags)"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                .flatMap(Set::stream)"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        tags.setTags(tagsInPersons);"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"    //@@author jordancjq"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitId":"-"},"content":"     * Creates a team in the manager."},{"lineNumber":252,"author":{"gitId":"-"},"content":"     * @throws DuplicateTeamException if an equivalent team already exists."},{"lineNumber":253,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    public void createTeam(Team t) throws DuplicateTeamException {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        teams.add(t);"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitId":"-"},"content":"     * Assigns a {@code person} to a {@code team}."},{"lineNumber":260,"author":{"gitId":"-"},"content":"     * @throws TeamNotFoundException if the {@code team} is not found in this {@code AddressBook}."},{"lineNumber":261,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    public void assignPersonToTeam(Person person, TeamName teamName) throws DuplicatePersonException {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        teams.assignPersonToTeam(person, teams.getTeam(teamName));"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"        if (!person.getTeamName().toString().equals(UNSPECIFIED_FIELD)) {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"                removePersonFromTeam(person, person.getTeamName());"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"                throw new AssertionError(\"Impossible: Team should contain of this person\");"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"        Person newPersonWithTeam \u003d"},{"lineNumber":274,"author":{"gitId":"-"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":275,"author":{"gitId":"-"},"content":"                        person.getRemark(), teamName, person.getTags(), person.getRating(), person.getPosition(),"},{"lineNumber":276,"author":{"gitId":"-"},"content":"                        person.getJerseyNumber(), person.getAvatar());"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"        if (!person.getTeamName().equals(newPersonWithTeam.getTeamName())) {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"                updatePerson(person, newPersonWithTeam);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"                throw new AssertionError(\"AddressBook should not have duplicate person after assigning team\");"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"                throw new AssertionError(\"Impossible: AddressBook should contain this person\");"},{"lineNumber":285,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":290,"author":{"gitId":"-"},"content":"     * Unassigns a {@code person} from team."},{"lineNumber":291,"author":{"gitId":"-"},"content":"     * @throws TeamNotFoundException if the {@code teamName} in {@code person} is {@code UNSPECIFIED_FIELD}."},{"lineNumber":292,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    public void unassignPersonFromTeam(Person person) throws TeamNotFoundException {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        if (person.getTeamName().toString().equals(UNSPECIFIED_FIELD)) {"},{"lineNumber":295,"author":{"gitId":"-"},"content":"            throw new TeamNotFoundException(person.getName().toString());"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"        Person newPersonWithTeam \u003d"},{"lineNumber":299,"author":{"gitId":"-"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":300,"author":{"gitId":"-"},"content":"                        person.getRemark(), new TeamName(UNSPECIFIED_FIELD), person.getTags(), person.getRating(),"},{"lineNumber":301,"author":{"gitId":"-"},"content":"                        person.getPosition(), person.getJerseyNumber(), person.getAvatar());"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":304,"author":{"gitId":"-"},"content":"            removePersonFromTeam(person, person.getTeamName());"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":306,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Impossible: Team should contain of this person\");"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":310,"author":{"gitId":"-"},"content":"            updatePerson(person, newPersonWithTeam);"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"AddressBook should not have duplicate person after assigning team\");"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":314,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Impossible: AddressBook should contain this person\");"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":319,"author":{"gitId":"-"},"content":"     * Immediately add a {@code person} to a {@code team}."},{"lineNumber":320,"author":{"gitId":"-"},"content":"     * @throws TeamNotFoundException if the {@code team} is not found in this {@code AddressBook}."},{"lineNumber":321,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    public void addPersonToTeam(Person person, TeamName teamName) throws DuplicatePersonException {"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        teams.assignPersonToTeam(person, teams.getTeam(teamName));"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":327,"author":{"gitId":"-"},"content":"     * Removes a {@code person} from a {@code team}."},{"lineNumber":328,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    private void removePersonFromTeam(Person person, TeamName teamName) throws PersonNotFoundException {"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":331,"author":{"gitId":"-"},"content":"            teams.removePersonFromTeam(person, teams.getTeam(teamName));"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":333,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":338,"author":{"gitId":"-"},"content":"     * Removes a {@code team} from {@code teams}."},{"lineNumber":339,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    public void removeTeam(TeamName teamName) throws TeamNotFoundException {"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        if (!teams.contains(teamName)) {"},{"lineNumber":342,"author":{"gitId":"-"},"content":"            throw new TeamNotFoundException();"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"        Team teamToRemove \u003d teams.getTeam(teamName);"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"        for (Person person : teamToRemove) {"},{"lineNumber":348,"author":{"gitId":"-"},"content":"            removeTeamFromPerson(person);"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"        teams.remove(teamToRemove);"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * Removes {@code teamName} from {@code person} in this {@code Team}."},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    private void removeTeamFromPerson(Person person) {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        Person personWithRemoveTeam \u003d"},{"lineNumber":359,"author":{"gitId":"-"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":360,"author":{"gitId":"-"},"content":"                        person.getRemark(), new TeamName(UNSPECIFIED_FIELD), person.getTags(), person.getRating(),"},{"lineNumber":361,"author":{"gitId":"-"},"content":"                        person.getPosition(), person.getJerseyNumber(), person.getAvatar());"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":364,"author":{"gitId":"-"},"content":"            persons.setPerson(person, personWithRemoveTeam);"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":366,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"AddressBook should not have duplicate person after assigning team\");"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Impossible: AddressBook should contain this person\");"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":373,"author":{"gitId":"-"},"content":"     * Renames {@code Team} with {@code updatedTeamName}."},{"lineNumber":374,"author":{"gitId":"-"},"content":"     * @return"},{"lineNumber":375,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    public void renameTeam(Team targetTeam, TeamName updatedTeamName) {"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":378,"author":{"gitId":"-"},"content":"            List\u003cPerson\u003e renameTeamPersonList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"            for (Person person : persons) {"},{"lineNumber":381,"author":{"gitId":"-"},"content":"                if (person.getTeamName().equals(targetTeam.getTeamName())) {"},{"lineNumber":382,"author":{"gitId":"-"},"content":"                    renameTeamPersonList.add(renameTeamInPerson(person, updatedTeamName, targetTeam));"},{"lineNumber":383,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":384,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"            Team updatedTeam \u003d new Team(updatedTeamName, renameTeamPersonList);"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"            teams.setTeam(targetTeam, updatedTeam);"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        } catch (DuplicateTeamException dte) {"},{"lineNumber":390,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"AddressBook should not have duplicate team after renaming\");"},{"lineNumber":391,"author":{"gitId":"-"},"content":"        } catch (TeamNotFoundException tnfe) {"},{"lineNumber":392,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Impossible: Teams should contain this team\");"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":394,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":397,"author":{"gitId":"-"},"content":"     * Renames {@code teamName} in {@code person} with {@code teamName}."},{"lineNumber":398,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":399,"author":{"gitId":"-"},"content":"    private Person renameTeamInPerson(Person person, TeamName teamName, Team targetTeam) {"},{"lineNumber":400,"author":{"gitId":"-"},"content":"        Person personWithRenameTeam \u003d"},{"lineNumber":401,"author":{"gitId":"-"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":402,"author":{"gitId":"-"},"content":"                        person.getRemark(), teamName, person.getTags(), person.getRating(),"},{"lineNumber":403,"author":{"gitId":"-"},"content":"                        person.getPosition(), person.getJerseyNumber(), person.getAvatar());"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":406,"author":{"gitId":"-"},"content":"            persons.setPerson(person, personWithRenameTeam);"},{"lineNumber":407,"author":{"gitId":"-"},"content":"            return personWithRenameTeam;"},{"lineNumber":408,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":409,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"AddressBook should not have duplicate person after assigning team\");"},{"lineNumber":410,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":411,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Impossible: AddressBook should contain this person\");"},{"lineNumber":412,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":413,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":414,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":415,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":416,"author":{"gitId":"-"},"content":""},{"lineNumber":417,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":418,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":420,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":421,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":424,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":426,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":429,"author":{"gitId":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":430,"author":{"gitId":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":431,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":434,"author":{"gitId":"-"},"content":"    public ObservableList\u003cTeam\u003e getTeamList() {"},{"lineNumber":435,"author":{"gitId":"-"},"content":"        return teams.asObservableList();"},{"lineNumber":436,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":437,"author":{"gitId":"-"},"content":""},{"lineNumber":438,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":439,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":440,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":441,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":442,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":443,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":444,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":445,"author":{"gitId":"-"},"content":""},{"lineNumber":446,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":447,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":449,"author":{"gitId":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":450,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":451,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":7,"codeeong":4,"-":440}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.exceptions.NoPlayerException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.team.exceptions.DuplicateTeamException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.team.exceptions.TeamNotFoundException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /** Adds the given person */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *      another existing person in the list."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code teamName}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(TeamName targetTeam) throws TeamNotFoundException;"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"lohtianwei"},"content":"     * Sorts players in address book by field in asc or desc order"},{"lineNumber":62,"author":{"gitId":"lohtianwei"},"content":"     * @param field"},{"lineNumber":63,"author":{"gitId":"lohtianwei"},"content":"     * @param order"},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":"    void sortPlayers(String field, String order) throws NoPlayerException;"},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":"    boolean getLockState();"},{"lineNumber":68,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":69,"author":{"gitId":"lohtianwei"},"content":"    UserPrefs getUserPrefs();"},{"lineNumber":70,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":71,"author":{"gitId":"lohtianwei"},"content":"    /** Locks address book from model*/"},{"lineNumber":72,"author":{"gitId":"lohtianwei"},"content":"    void lockAddressBookModel();"},{"lineNumber":73,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":74,"author":{"gitId":"lohtianwei"},"content":"    /** Unlocks address book from model*/"},{"lineNumber":75,"author":{"gitId":"lohtianwei"},"content":"    void unlockAddressBookModel();"},{"lineNumber":76,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /** Removes the given {@code tag} from all {@code Person}s. */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /** Create the given team */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    void createTeam(Team team) throws DuplicateTeamException;"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /** Assign person to team */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    void assignPersonToTeam(Person person, TeamName teamName)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException;"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /** Unassign person from team */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    void unassignPersonFromTeam(Person person) throws TeamNotFoundException;"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /** Removes the given team */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    void removeTeam(TeamName teamName) throws TeamNotFoundException;"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /** Renames the given team */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    void renameTeam(Team targetTeam, TeamName teamName);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"codeeong"},"content":"    /** sets the given {@code tag} to color. */"},{"lineNumber":97,"author":{"gitId":"codeeong"},"content":"    boolean setTagColour(Tag tag, String colour);"},{"lineNumber":98,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":99,"author":{"gitId":"codeeong"},"content":"    /** Returns an unmodifiable view of the team list */"},{"lineNumber":100,"author":{"gitId":"codeeong"},"content":"    ObservableList\u003cTeam\u003e getInitTeamList();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":18,"codeeong":5,"-":78}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.RemoveSelectedTeamEvent;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.exceptions.NoPlayerException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.team.exceptions.DuplicateTeamException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.team.exceptions.TeamNotFoundException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":29,"author":{"gitId":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":30,"author":{"gitId":"-"},"content":" */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":45,"author":{"gitId":"lohtianwei"},"content":"        this.userPrefs \u003d userPrefs;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"lohtianwei"},"content":"    //@@author lohtianwei"},{"lineNumber":95,"author":{"gitId":"lohtianwei"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"lohtianwei"},"content":"    public void sortPlayers(String field, String order) throws NoPlayerException {"},{"lineNumber":97,"author":{"gitId":"lohtianwei"},"content":"        addressBook.sortPlayersBy(field, order);"},{"lineNumber":98,"author":{"gitId":"lohtianwei"},"content":"        indicateAddressBookChanged();"},{"lineNumber":99,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":101,"author":{"gitId":"lohtianwei"},"content":"    public UserPrefs getUserPrefs() {"},{"lineNumber":102,"author":{"gitId":"lohtianwei"},"content":"        return userPrefs;"},{"lineNumber":103,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":105,"author":{"gitId":"lohtianwei"},"content":"    public void lockAddressBookModel() {"},{"lineNumber":106,"author":{"gitId":"lohtianwei"},"content":"        getUserPrefs().lockAddressBook();"},{"lineNumber":107,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":109,"author":{"gitId":"lohtianwei"},"content":"    public void unlockAddressBookModel() {"},{"lineNumber":110,"author":{"gitId":"lohtianwei"},"content":"        getUserPrefs().unlockAddressBook();"},{"lineNumber":111,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":113,"author":{"gitId":"lohtianwei"},"content":"    public boolean getLockState() {"},{"lineNumber":114,"author":{"gitId":"lohtianwei"},"content":"        return getUserPrefs().getAddressBookLockState();"},{"lineNumber":115,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"lohtianwei"},"content":"    //@@author"},{"lineNumber":117,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":118,"author":{"gitId":"codeeong"},"content":"    @Override"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":121,"author":{"gitId":"codeeong"},"content":"        indicateAddressBookChanged();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    //@@author jordancjq"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public synchronized void createTeam(Team team) throws DuplicateTeamException {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        addressBook.createTeam(team);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public synchronized void assignPersonToTeam(Person person, TeamName teamName) throws DuplicatePersonException {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        addressBook.assignPersonToTeam(person, teamName);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public synchronized void unassignPersonFromTeam(Person person) throws TeamNotFoundException {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        addressBook.unassignPersonFromTeam(person);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public synchronized void removeTeam(TeamName teamName) throws TeamNotFoundException {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        requireNonNull(teamName);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        raise(new RemoveSelectedTeamEvent(teamName));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        addressBook.removeTeam(teamName);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public synchronized void renameTeam(Team targetTeam, TeamName updatedTeamName) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        requireAllNonNull(targetTeam, updatedTeamName);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        addressBook.renameTeam(targetTeam, updatedTeamName);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    //@@author Codee"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public boolean setTagColour(Tag tag, String colour) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        ObservableList\u003cTag\u003e allTags \u003d addressBook.getTagList();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        boolean isTagValid \u003d false;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        for (Tag t : allTags) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            if (t.getTagName().equals(tag.getTagName())) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                isTagValid \u003d true;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        if (!isTagValid) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        addressBook.setTagColour(tag, colour);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return isTagValid;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":178,"author":{"gitId":"codeeong"},"content":"    @Override"},{"lineNumber":179,"author":{"gitId":"codeeong"},"content":"    public ObservableList\u003cTeam\u003e getInitTeamList() {"},{"lineNumber":180,"author":{"gitId":"codeeong"},"content":"        return addressBook.getTeamList();"},{"lineNumber":181,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * {@code addressBook}"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    //@@author jordancjq"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(TeamName targetTeam) throws TeamNotFoundException {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        requireNonNull(targetTeam);"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        List\u003cTeam\u003e teamList \u003d addressBook.getTeamList();"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        if (teamList.stream().anyMatch(target -\u003e target.getTeamName().equals(targetTeam))) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            filteredPersons.setPredicate(t -\u003e t.getTeamName().equals(targetTeam));"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            throw new TeamNotFoundException();"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":28,"codeeong":7,"-":197}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":"import com.google.common.hash.Hashing;"},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class UserPrefs {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":16,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":17,"author":{"gitId":"codeeong"},"content":"    private String addressBookFilePath \u003d \"data/myteammanager.xml\";"},{"lineNumber":18,"author":{"gitId":"codeeong"},"content":"    private String addressBookName \u003d \"MyTeamManager\";"},{"lineNumber":19,"author":{"gitId":"codeeong"},"content":"    private String addressBookTheme \u003d \"DarkTheme.css\";"},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":"    private boolean addressBookLockState \u003d false;"},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":"    private String addressBookHashedPass \u003d Hashing.sha256()"},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":"            .hashString(\"ilikesports\", StandardCharsets.UTF_8).toString();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public UserPrefs() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return addressBookName;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"lohtianwei"},"content":"    //@@author lohtianwei"},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"    public void lockAddressBook() {"},{"lineNumber":54,"author":{"gitId":"lohtianwei"},"content":"        this.addressBookLockState \u003d true;"},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":57,"author":{"gitId":"lohtianwei"},"content":"    public void unlockAddressBook() {"},{"lineNumber":58,"author":{"gitId":"lohtianwei"},"content":"        this.addressBookLockState \u003d false;"},{"lineNumber":59,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":61,"author":{"gitId":"lohtianwei"},"content":"    public String getAddressBookHashedPass() {"},{"lineNumber":62,"author":{"gitId":"lohtianwei"},"content":"        return addressBookHashedPass;"},{"lineNumber":63,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":"    public boolean getAddressBookLockState() {"},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":"        return this.addressBookLockState;"},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    //@@author Codee"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public String getAddressBookTheme() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return addressBookTheme;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":78,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":79,"author":{"gitId":"codeeong"},"content":"    public void setAddressBookTheme(String addressBookTheme) {"},{"lineNumber":80,"author":{"gitId":"codeeong"},"content":"        this.addressBookTheme \u003d addressBookTheme;"},{"lineNumber":81,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":96,"author":{"gitId":"lohtianwei"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName)"},{"lineNumber":97,"author":{"gitId":"lohtianwei"},"content":"                \u0026\u0026 Objects.equals(addressBookHashedPass, o.addressBookHashedPass)"},{"lineNumber":98,"author":{"gitId":"lohtianwei"},"content":"                \u0026\u0026 Objects.equals(addressBookLockState, o.addressBookLockState);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":112,"author":{"gitId":"lohtianwei"},"content":"        sb.append(\"\\nPassword: \" + addressBookHashedPass);"},{"lineNumber":113,"author":{"gitId":"lohtianwei"},"content":"        sb.append(\"\\nLock State: \" + Boolean.toString(this.addressBookLockState));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":28,"codeeong":9,"-":80}},{"path":"src/main/java/seedu/address/model/person/Address.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Address {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private boolean isPrivate;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param address A valid address."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Address(String address) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.value \u003d address;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.isPrivate \u003d false;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":"    public Address(String address, boolean isPrivate) {"},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":"        this(address);"},{"lineNumber":39,"author":{"gitId":"lohtianwei"},"content":"        this.setPrivate(isPrivate);"},{"lineNumber":40,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX) || test.equals(UNSPECIFIED_FIELD);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (isPrivate) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return \"\u003cPrivate Address\u003e\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"lohtianwei"},"content":"    public boolean isPrivate() {"},{"lineNumber":58,"author":{"gitId":"lohtianwei"},"content":"        return isPrivate;"},{"lineNumber":59,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void togglePrivacy() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.isPrivate \u003d isPrivate ? false : true;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setPrivate(boolean isPrivate) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.isPrivate \u003d isPrivate;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":8,"-":73}},{"path":"src/main/java/seedu/address/model/person/Avatar.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.StandardCopyOption;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"//@@author lithiumlkid"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Represents a Player\u0027s avatar in the address book. Contains filepath to avatar image file."},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAvatar(String)}"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class Avatar {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_AVATAR_CONSTRAINTS \u003d"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \"Please specify the absolute filepath for the avatar image eg. av/C:\\\\image.png\\n (for Windows), \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"av//User/username/path/to/image.jpg (for MacOS). \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Image file should be 200x200 and in jpg or png format\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String AVATAR_VALIDATION_PATTERN \u003d \"([^\\\\s]+(\\\\.(?i)(jpg|png))$)\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private String value;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Constructs an {@code Avatar}."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param avatar A valid avatar."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Avatar(String avatar) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireNonNull(avatar);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        checkArgument(isValidAvatar(avatar), MESSAGE_AVATAR_CONSTRAINTS);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.value \u003d avatar;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid player\u0027s avatar."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static boolean isValidAvatar(String test) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Pattern pattern \u003d Pattern.compile(AVATAR_VALIDATION_PATTERN);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Matcher matcher \u003d pattern.matcher(test);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return matcher.matches() || test.equals(UNSPECIFIED_FIELD);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                || (other instanceof Avatar // instanceof handles nulls"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.value.equals(((Avatar) other).value)); // state check"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    */"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Copies the image file from file path entered into images/ and renames it as [name].png"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * and saves the file path in value"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @param player player\u0027s avatar image filepath string"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws IOException  thrown when file not found"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setFilePath(String player) throws IOException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (value.equals(\"\u003cUNSPECIFIED\u003e\")) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        final File file \u003d new File(value);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Path dest \u003d new File(\"images/\" + player.replaceAll(\"\\\\s+\", \"\") + \".png\").toPath();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Files.createDirectories(Paths.get(\"images\")); // Creates missing directories if any"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Files.copy(file.toPath(), dest, StandardCopyOption.REPLACE_EXISTING);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        this.value \u003d dest.toString();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public String getValue() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static void setUpPlaceholderForTest() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"codeeong"},"content":"            Files.copy(Avatar.class.getResourceAsStream(\"/images/placeholder_test.png\"),"},{"lineNumber":93,"author":{"gitId":"codeeong"},"content":"                    Paths.get(\"images/placeholder_test.png\"), StandardCopyOption.REPLACE_EXISTING);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            LogsCenter.getLogger(Avatar.class).warning(\"placeholder image file missing\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                || (other instanceof Avatar // instanceof handles nulls"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.value.equals(((Avatar) other).value)); // state check"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":2,"-":108}},{"path":"src/main/java/seedu/address/model/person/Email.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Person emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private boolean isPrivate;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param email A valid email address."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Email(String email) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.value \u003d email;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.isPrivate \u003d false;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"lohtianwei"},"content":"    public Email(String email, boolean isPrivate) {"},{"lineNumber":46,"author":{"gitId":"lohtianwei"},"content":"        this(email);"},{"lineNumber":47,"author":{"gitId":"lohtianwei"},"content":"        this.setPrivate(isPrivate);"},{"lineNumber":48,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (isPrivate) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return \"\u003cPrivate Email\u003e\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":"    public boolean isPrivate() {"},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":"        return isPrivate;"},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void togglePrivacy() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.isPrivate \u003d isPrivate ? false : true;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void setPrivate(boolean isPrivate) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        this.isPrivate \u003d isPrivate;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":8,"-":81}},{"path":"src/main/java/seedu/address/model/person/Phone.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Phone {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private boolean isPrivate;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.value \u003d phone;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.isPrivate \u003d false;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":"    public Phone(String phone, boolean isPrivate) {"},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":"        this(phone);"},{"lineNumber":34,"author":{"gitId":"lohtianwei"},"content":"        this.setPrivate(isPrivate);"},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX) || test.equals(UNSPECIFIED_FIELD);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (isPrivate) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            return \"\u003cPrivate Phone\u003e\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"lohtianwei"},"content":"    public boolean isPrivate() {"},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"        return isPrivate;"},{"lineNumber":54,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void togglePrivacy() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.isPrivate \u003d isPrivate ? false : true;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void setPrivate(boolean isPrivate) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.isPrivate \u003d isPrivate;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":8,"-":68}},{"path":"src/main/java/seedu/address/model/person/Rating.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"//@@author lithiumlkid"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Represents a Player\u0027s rating in the address book."},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Rating {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_RATING_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            \"Player\u0027s rating should be an integer from 0 - 5.\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String RATING_VALIDATION_REGEX \u003d \"[0-5]\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":"    private boolean isPrivate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Rating}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param rating A valid rating."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Rating(String rating) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(rating);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidRating(rating), MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.value \u003d rating;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":"    public Rating(String rating, boolean isPrivate) {"},{"lineNumber":34,"author":{"gitId":"lohtianwei"},"content":"        this(rating);"},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":"        this.setPrivate(isPrivate);"},{"lineNumber":36,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid player\u0027s rating."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static boolean isValidRating(String test) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return test.matches(RATING_VALIDATION_REGEX) || test.equals(UNSPECIFIED_FIELD);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"lohtianwei"},"content":"        if (isPrivate) {"},{"lineNumber":48,"author":{"gitId":"lohtianwei"},"content":"            return \"\u003cPrivate Rating\u003e\";"},{"lineNumber":49,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"    public boolean isPrivate() {"},{"lineNumber":54,"author":{"gitId":"lohtianwei"},"content":"        return isPrivate;"},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":57,"author":{"gitId":"lohtianwei"},"content":"    public void togglePrivacy() {"},{"lineNumber":58,"author":{"gitId":"lohtianwei"},"content":"        this.isPrivate \u003d isPrivate ? false : true;"},{"lineNumber":59,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":61,"author":{"gitId":"lohtianwei"},"content":"    public void setPrivate(boolean isPrivate) {"},{"lineNumber":62,"author":{"gitId":"lohtianwei"},"content":"        this.isPrivate \u003d isPrivate;"},{"lineNumber":63,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                || (other instanceof Rating // instanceof handles nulls"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.value.equals(((Rating) other).value)); // state check"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":21,"-":56}},{"path":"src/main/java/seedu/address/model/person/Remark.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"//@@author jordancjq"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s remark in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is always valid}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Remark {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Remark can contain any values, can even be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private boolean isPrivate;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Remark}"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param remark Any remark"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Remark(String remark) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(remark);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.value \u003d remark;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.isPrivate \u003d false;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":"    public Remark(String remark, boolean isPrivate) {"},{"lineNumber":30,"author":{"gitId":"lohtianwei"},"content":"        this(remark);"},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":"        this.setPrivate(isPrivate);"},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (isPrivate) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            return \"\u003cPrivate Remarks\u003e\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":"    public boolean isPrivate() {"},{"lineNumber":43,"author":{"gitId":"lohtianwei"},"content":"        return isPrivate;"},{"lineNumber":44,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void togglePrivacy() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.isPrivate \u003d isPrivate ? false : true;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setPrivate(boolean isPrivate) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.isPrivate \u003d isPrivate;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":8,"-":57}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":"import java.util.Comparator;"},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitId":"lohtianwei"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.exceptions.NoPlayerException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":22,"author":{"gitId":"-"},"content":" *"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":24,"author":{"gitId":"-"},"content":" *"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Adds a person to the list."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            replacement.add(person);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        setPersons(replacement);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"lohtianwei"},"content":"    //@@author lohtianwei"},{"lineNumber":110,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"lohtianwei"},"content":"     * Sorts players by selected field in asc or desc order."},{"lineNumber":112,"author":{"gitId":"lohtianwei"},"content":"     * @return"},{"lineNumber":113,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"lohtianwei"},"content":"    public void sortBy(String field, String order) throws NoPlayerException {"},{"lineNumber":115,"author":{"gitId":"lohtianwei"},"content":"        if (internalList.size() \u003c 1) {"},{"lineNumber":116,"author":{"gitId":"lohtianwei"},"content":"            throw new NoPlayerException();"},{"lineNumber":117,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":119,"author":{"gitId":"lohtianwei"},"content":"        Comparator\u003cPerson\u003e comparator \u003d null;"},{"lineNumber":120,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":121,"author":{"gitId":"lohtianwei"},"content":"        Comparator\u003cPerson\u003e nameComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":122,"author":{"gitId":"lohtianwei"},"content":"            @Override"},{"lineNumber":123,"author":{"gitId":"lohtianwei"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":124,"author":{"gitId":"lohtianwei"},"content":"                return p1.getName().fullName.compareTo(p2.getName().fullName);"},{"lineNumber":125,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"lohtianwei"},"content":"        };"},{"lineNumber":127,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":128,"author":{"gitId":"lohtianwei"},"content":"        Comparator\u003cPerson\u003e jerseyComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":129,"author":{"gitId":"lohtianwei"},"content":"            @Override"},{"lineNumber":130,"author":{"gitId":"lohtianwei"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":131,"author":{"gitId":"lohtianwei"},"content":"                return p1.getJerseyNumber().value.compareTo(p2.getJerseyNumber().value);"},{"lineNumber":132,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"lohtianwei"},"content":"        };"},{"lineNumber":134,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":135,"author":{"gitId":"lohtianwei"},"content":"        Comparator\u003cPerson\u003e ratingComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":136,"author":{"gitId":"lohtianwei"},"content":"            @Override"},{"lineNumber":137,"author":{"gitId":"lohtianwei"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":138,"author":{"gitId":"lohtianwei"},"content":"                return p1.getRating().toString().compareTo(p2.getRating().toString());"},{"lineNumber":139,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"lohtianwei"},"content":"        };"},{"lineNumber":141,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":142,"author":{"gitId":"lohtianwei"},"content":"        Comparator\u003cPerson\u003e posComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":143,"author":{"gitId":"lohtianwei"},"content":"            @Override"},{"lineNumber":144,"author":{"gitId":"lohtianwei"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":145,"author":{"gitId":"lohtianwei"},"content":"                return p1.getPosition().value.compareTo(p2.getPosition().value);"},{"lineNumber":146,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":147,"author":{"gitId":"lohtianwei"},"content":"        };"},{"lineNumber":148,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":149,"author":{"gitId":"lohtianwei"},"content":"        Comparator\u003cPerson\u003e emailComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":150,"author":{"gitId":"lohtianwei"},"content":"            @Override"},{"lineNumber":151,"author":{"gitId":"lohtianwei"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":152,"author":{"gitId":"lohtianwei"},"content":"                return p1.getEmail().toString().compareTo(p2.getEmail().toString());"},{"lineNumber":153,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"lohtianwei"},"content":"        };"},{"lineNumber":155,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":156,"author":{"gitId":"lohtianwei"},"content":"        Comparator\u003cPerson\u003e addressComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":157,"author":{"gitId":"lohtianwei"},"content":"            @Override"},{"lineNumber":158,"author":{"gitId":"lohtianwei"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":159,"author":{"gitId":"lohtianwei"},"content":"                return p1.getAddress().toString().compareTo(p2.getAddress().toString());"},{"lineNumber":160,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"lohtianwei"},"content":"        };"},{"lineNumber":162,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":163,"author":{"gitId":"lohtianwei"},"content":"        switch (field) {"},{"lineNumber":164,"author":{"gitId":"lohtianwei"},"content":"        case \"name\":"},{"lineNumber":165,"author":{"gitId":"lohtianwei"},"content":"            comparator \u003d nameComparator;"},{"lineNumber":166,"author":{"gitId":"lohtianwei"},"content":"            break;"},{"lineNumber":167,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":168,"author":{"gitId":"lohtianwei"},"content":"        case \"jersey\":"},{"lineNumber":169,"author":{"gitId":"lohtianwei"},"content":"            comparator \u003d jerseyComparator;"},{"lineNumber":170,"author":{"gitId":"lohtianwei"},"content":"            break;"},{"lineNumber":171,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":172,"author":{"gitId":"lohtianwei"},"content":"        case \"pos\":"},{"lineNumber":173,"author":{"gitId":"lohtianwei"},"content":"            comparator \u003d posComparator;"},{"lineNumber":174,"author":{"gitId":"lohtianwei"},"content":"            break;"},{"lineNumber":175,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":176,"author":{"gitId":"lohtianwei"},"content":"        case \"rating\":"},{"lineNumber":177,"author":{"gitId":"lohtianwei"},"content":"            comparator \u003d ratingComparator;"},{"lineNumber":178,"author":{"gitId":"lohtianwei"},"content":"            break;"},{"lineNumber":179,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":180,"author":{"gitId":"lohtianwei"},"content":"        case \"email\":"},{"lineNumber":181,"author":{"gitId":"lohtianwei"},"content":"            comparator \u003d emailComparator;"},{"lineNumber":182,"author":{"gitId":"lohtianwei"},"content":"            break;"},{"lineNumber":183,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":184,"author":{"gitId":"lohtianwei"},"content":"        case \"address\":"},{"lineNumber":185,"author":{"gitId":"lohtianwei"},"content":"            comparator \u003d addressComparator;"},{"lineNumber":186,"author":{"gitId":"lohtianwei"},"content":"            break;"},{"lineNumber":187,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":188,"author":{"gitId":"lohtianwei"},"content":"        default:"},{"lineNumber":189,"author":{"gitId":"lohtianwei"},"content":"            throw new AssertionError(\"Invalid field parameter entered...\\n\");"},{"lineNumber":190,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":192,"author":{"gitId":"lohtianwei"},"content":"        switch (order) {"},{"lineNumber":193,"author":{"gitId":"lohtianwei"},"content":"        case \"asc\":"},{"lineNumber":194,"author":{"gitId":"lohtianwei"},"content":"            Collections.sort(internalList, comparator);"},{"lineNumber":195,"author":{"gitId":"lohtianwei"},"content":"            break;"},{"lineNumber":196,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":197,"author":{"gitId":"lohtianwei"},"content":"        case \"desc\":"},{"lineNumber":198,"author":{"gitId":"lohtianwei"},"content":"            Collections.sort(internalList, Collections.reverseOrder(comparator));"},{"lineNumber":199,"author":{"gitId":"lohtianwei"},"content":"            break;"},{"lineNumber":200,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":201,"author":{"gitId":"lohtianwei"},"content":"        default:"},{"lineNumber":202,"author":{"gitId":"lohtianwei"},"content":"            throw new AssertionError(\"Invalid field parameter entered...\\n\");"},{"lineNumber":203,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"lohtianwei"},"content":"    //@@author"},{"lineNumber":206,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        return internalList.iterator();"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":105,"-":118}},{"path":"src/main/java/seedu/address/model/person/exceptions/NoPlayerException.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"lohtianwei"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lohtianwei"},"content":" * Singals that the operation is unable to sort due to no players in book."},{"lineNumber":5,"author":{"gitId":"lohtianwei"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":"public class NoPlayerException extends Exception {"},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":7}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be a string\";"},{"lineNumber":13,"author":{"gitId":"codeeong"},"content":"    public static final String MESSAGE_TAG_COLOUR_CONSTRAINTS \u003d \"Tag colours should be one of these colours:\""},{"lineNumber":14,"author":{"gitId":"codeeong"},"content":"        + \"teal, red, yellow, blue, orange, brown, green, pink, black, grey\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":16,"author":{"gitId":"codeeong"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d"},{"lineNumber":17,"author":{"gitId":"codeeong"},"content":"        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\" };"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public final String tagName;"},{"lineNumber":20,"author":{"gitId":"codeeong"},"content":"    private String tagColour;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":31,"author":{"gitId":"codeeong"},"content":"        this.tagColour \u003d \"teal\";"},{"lineNumber":32,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":34,"author":{"gitId":"codeeong"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"codeeong"},"content":"     * Overloaded constructor for a {@code Tag}."},{"lineNumber":36,"author":{"gitId":"codeeong"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"codeeong"},"content":"     * @param tagName A valid tag name"},{"lineNumber":38,"author":{"gitId":"codeeong"},"content":"     * @param tagColour A valid tag colour."},{"lineNumber":39,"author":{"gitId":"codeeong"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"codeeong"},"content":"    public Tag(String tagName, String tagColour) {"},{"lineNumber":41,"author":{"gitId":"codeeong"},"content":"        requireNonNull(tagName);"},{"lineNumber":42,"author":{"gitId":"codeeong"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitId":"codeeong"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":44,"author":{"gitId":"codeeong"},"content":"        this.tagColour \u003d tagColour;"},{"lineNumber":45,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":47,"author":{"gitId":"codeeong"},"content":"    public String getTagName() {"},{"lineNumber":48,"author":{"gitId":"codeeong"},"content":"        return this.tagName;"},{"lineNumber":49,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":51,"author":{"gitId":"codeeong"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"codeeong"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":53,"author":{"gitId":"codeeong"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"codeeong"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":55,"author":{"gitId":"codeeong"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":56,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /** @@author Codee */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String getTagColour() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return this.tagColour;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Changes the {@code tagColour} for {@code tagName}\u0027s label"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void changeTagColour(String colour) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.tagColour \u003d colour;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag colour."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static boolean isValidTagColour(String testColour) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        for (String tcs : TAG_COLOR_STYLES) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            if (testColour.equals(tcs)) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":83,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":34,"-":69}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":22,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.team.exceptions.DuplicateTeamException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":31,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Aaron Ramsey\"), new Phone(\"87438807\"), new Email(\"aramsey@example.com\"),"},{"lineNumber":32,"author":{"gitId":"codeeong"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Remark(\"Sign him for one more year\"),"},{"lineNumber":33,"author":{"gitId":"codeeong"},"content":"                new TeamName(\"Arsenal\"),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                getTagSet(\"redCard\"), new Rating(\"3\"), new Position(\"1\"), new JerseyNumber(\"2\"),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":36,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Hector Moruno\"), new Phone(\"99272758\"), new Email(\"hectorm@example.com\"),"},{"lineNumber":37,"author":{"gitId":"codeeong"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Remark(\"\"), new TeamName(\"Arsenal\"),"},{"lineNumber":38,"author":{"gitId":"codeeong"},"content":"                getTagSet(\"fastRunner\", \"goodAttitude\"), new Rating(\"1\"), new Position(\"1\"), new JerseyNumber(\"2\"),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":40,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Cesc Fabregas\"), new Phone(\"93210283\"), new Email(\"cescfabregas@example.com\"),"},{"lineNumber":41,"author":{"gitId":"codeeong"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Remark(\"\"), new TeamName(\"Chelsea\"),"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                getTagSet(\"yellowCard\"), new Rating(\"4\"), new Position(\"1\"), new JerseyNumber(\"2\"),"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":44,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":45,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Remark(\"\"), new TeamName(\"Chelsea\"),"},{"lineNumber":46,"author":{"gitId":"codeeong"},"content":"                    getTagSet(\"yellowCard\"), new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"2\"),"},{"lineNumber":47,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":48,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Ospina\"), new Phone(\"99272758\"), new Email(\"Ospina@arsenal.com\"),"},{"lineNumber":49,"author":{"gitId":"codeeong"},"content":"                    new Address(\"70 Jurong Central Circle\"), new Remark(\"\"), new TeamName(\"Arsenal\"),"},{"lineNumber":50,"author":{"gitId":"codeeong"},"content":"                    getTagSet(\"fastRunner\", \"goodAttitude\"), new Rating(\"1\"), new Position(\"1\"), new JerseyNumber(\"22\"),"},{"lineNumber":51,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":52,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Cech\"), new Phone(\"93210283\"), new Email(\"cech@arsenal.com\"),"},{"lineNumber":53,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Remark(\"\"), new TeamName(\"Chelsea\"),"},{"lineNumber":54,"author":{"gitId":"codeeong"},"content":"                    getTagSet(\"yellowCard\"), new Rating(\"4\"), new Position(\"1\"), new JerseyNumber(\"2\"),"},{"lineNumber":55,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":56,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Mertesacker\"), new Phone(\"95432223\"), new Email(\"mertesacker@arsenal.com\"),"},{"lineNumber":57,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 430 Pasir Ris Street 33, #12-26\"), new Remark(\"\"),"},{"lineNumber":58,"author":{"gitId":"codeeong"},"content":"                    new TeamName(\"Arsenal\"), getTagSet(\"injured\"),"},{"lineNumber":59,"author":{"gitId":"codeeong"},"content":"                    new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"23\"),"},{"lineNumber":60,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":61,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Koscielny\"), new Phone(\"92352021\"), new Email(\"koscielny@example.com\"),"},{"lineNumber":62,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Remark(\"\"), new TeamName(\"Arsenal\"),"},{"lineNumber":63,"author":{"gitId":"codeeong"},"content":"                    getTagSet(\"badAttitude\"),"},{"lineNumber":64,"author":{"gitId":"codeeong"},"content":"                    new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"2\"),"},{"lineNumber":65,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":66,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Holding\"), new Phone(\"92624417\"), new Email(\"holding@example.com\"),"},{"lineNumber":67,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Remark(\"\"), new TeamName(\"Arsenal\"),"},{"lineNumber":68,"author":{"gitId":"codeeong"},"content":"                    getTagSet(\"fastRunner\"), new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"7\"),"},{"lineNumber":69,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":70,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Monreal\"), new Phone(\"99272758\"), new Email(\"monreal@arsenal.com\"),"},{"lineNumber":71,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Remark(\"\"), new TeamName(\"Arsenal\"),"},{"lineNumber":72,"author":{"gitId":"codeeong"},"content":"                    getTagSet(\"fastRunner\", \"goodAttitude\"), new Rating(\"1\"), new Position(\"1\"), new JerseyNumber(\"2\"),"},{"lineNumber":73,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":74,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Mustafi\"), new Phone(\"93215483\"), new Email(\"mustafi@arsenal.com\"),"},{"lineNumber":75,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Remark(\"\"), new TeamName(\"Arsenal\"),"},{"lineNumber":76,"author":{"gitId":"codeeong"},"content":"                    getTagSet(\"yellowCard\"), new Rating(\"4\"), new Position(\"1\"), new JerseyNumber(\"4\"),"},{"lineNumber":77,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":78,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Chambers\"), new Phone(\"91031282\"), new Email(\"chambers@arsenal.com\"),"},{"lineNumber":79,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Remark(\"\"),"},{"lineNumber":80,"author":{"gitId":"codeeong"},"content":"                    new TeamName(\"Arsenal\"), getTagSet(\"injured\"),"},{"lineNumber":81,"author":{"gitId":"codeeong"},"content":"                    new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"2\"),"},{"lineNumber":82,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":83,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Chambers\"), new Phone(\"92492021\"), new Email(\"chambers@arsenal.com\"),"},{"lineNumber":84,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Remark(\"\"), new TeamName(\"Arsenal\"),"},{"lineNumber":85,"author":{"gitId":"codeeong"},"content":"                    getTagSet(\"badAttitude\"),"},{"lineNumber":86,"author":{"gitId":"codeeong"},"content":"                    new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"2\"),"},{"lineNumber":87,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Remark(\"\"),"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                    new TeamName(\"Chelsea\"), getTagSet(\"injured\"),"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                    new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"2\"),"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":93,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Irfan Fandi\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":94,"author":{"gitId":"codeeong"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Remark(\"\"), new TeamName(\"Chelsea\"),"},{"lineNumber":95,"author":{"gitId":"codeeong"},"content":"                getTagSet(\"badAttitude\"),"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"2\"),"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":98,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Mavropanos\"), new Phone(\"92624417\"), new Email(\"mavropanos@arsenal.com\"),"},{"lineNumber":99,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Remark(\"\"), new TeamName(\"Chelsea\"),"},{"lineNumber":100,"author":{"gitId":"codeeong"},"content":"                    getTagSet(\"yellowCard\"), new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"98\"),"},{"lineNumber":101,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":102,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Kolasinac\"), new Phone(\"99272758\"), new Email(\"kolasinac@arsenal.com\"),"},{"lineNumber":103,"author":{"gitId":"codeeong"},"content":"                    new Address(\"70 Jurong Central Circle\"), new Remark(\"\"), new TeamName(\"Arsenal\"),"},{"lineNumber":104,"author":{"gitId":"codeeong"},"content":"                    getTagSet(\"fastRunner\", \"goodAttitude\"), new Rating(\"1\"), new Position(\"2\"), new JerseyNumber(\"52\"),"},{"lineNumber":105,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":106,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Mkhitaryan\"), new Phone(\"93210283\"), new Email(\"mkhitaryan@arsenal.com\"),"},{"lineNumber":107,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Remark(\"\"), new TeamName(\"Arsenal\"),"},{"lineNumber":108,"author":{"gitId":"codeeong"},"content":"                    getTagSet(\"yellowCard\"), new Rating(\"4\"), new Position(\"1\"), new JerseyNumber(\"2\"),"},{"lineNumber":109,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":110,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Wilshere\"), new Phone(\"95432223\"), new Email(\"wilshere@arsenal.com\"),"},{"lineNumber":111,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 430 Pasir Ris Street 33, #12-26\"), new Remark(\"\"),"},{"lineNumber":112,"author":{"gitId":"codeeong"},"content":"                    new TeamName(\"Arsenal\"), getTagSet(\"injured\"),"},{"lineNumber":113,"author":{"gitId":"codeeong"},"content":"                    new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"23\"),"},{"lineNumber":114,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":115,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Ozil\"), new Phone(\"92352021\"), new Email(\"ozil@example.com\"),"},{"lineNumber":116,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Remark(\"\"), new TeamName(\"Arsenal\"),"},{"lineNumber":117,"author":{"gitId":"codeeong"},"content":"                    getTagSet(\"badAttitude\"),"},{"lineNumber":118,"author":{"gitId":"codeeong"},"content":"                    new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"2\"),"},{"lineNumber":119,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":120,"author":{"gitId":"codeeong"},"content":"            new Person(new Name(\"Xhaka\"), new Phone(\"92624417\"), new Email(\"xhaka@example.com\"),"},{"lineNumber":121,"author":{"gitId":"codeeong"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Remark(\"\"), new TeamName(\"Arsenal\"),"},{"lineNumber":122,"author":{"gitId":"codeeong"},"content":"                    getTagSet(\"fastRunner\"), new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"7\"),"},{"lineNumber":123,"author":{"gitId":"codeeong"},"content":"                    new Avatar(\"\u003cUNSPECIFIED\u003e\")),"},{"lineNumber":124,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    //@@author Codee"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public static Team[] getSampleTeams()  {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return new Team[] {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            new Team(new TeamName(\"Arsenal\")),"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            new Team(new TeamName(\"Chelsea\"))"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            //@@author Codee"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            for (Team sampleTeam : getSampleTeams()) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                sampleAb.createTeam(sampleTeam);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            //@@author"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                sampleAb.addPersonToTeam(samplePerson, samplePerson.getTeamName());"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            return sampleAb;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":152,"author":{"gitId":"codeeong"},"content":"        } catch (DuplicateTeamException e) {"},{"lineNumber":153,"author":{"gitId":"codeeong"},"content":"            throw new AssertionError(\" sample data cannot contain duplicate teams\", e);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        for (String s : strings) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        return tags;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":86,"-":83}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private String name;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private String phone;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Boolean phonePrivacy;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private String email;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Boolean emailPrivacy;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private String address;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Boolean addressPrivacy;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private String remark;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private Boolean remarkPrivacy;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private String teamName;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private String rating;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":"    private Boolean ratingPrivacy;"},{"lineNumber":56,"author":{"gitId":"lohtianwei"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private String position;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private String jerseyNumber;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private String avatar;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @XmlElement"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":80,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":81,"author":{"gitId":"lohtianwei"},"content":"        this.remarkPrivacy \u003d false;"},{"lineNumber":82,"author":{"gitId":"lohtianwei"},"content":"        this.phonePrivacy \u003d false;"},{"lineNumber":83,"author":{"gitId":"lohtianwei"},"content":"        this.addressPrivacy \u003d false;"},{"lineNumber":84,"author":{"gitId":"lohtianwei"},"content":"        this.emailPrivacy \u003d false;"},{"lineNumber":85,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        teamName \u003d source.getTeamName().fullName;"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        phonePrivacy \u003d source.getPhone().isPrivate();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        emailPrivacy \u003d source.getEmail().isPrivate();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        addressPrivacy \u003d source.getAddress().isPrivate();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        remarkPrivacy \u003d source.getRemark().isPrivate();"},{"lineNumber":108,"author":{"gitId":"lohtianwei"},"content":"        ratingPrivacy \u003d source.getRating().isPrivate();"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        rating \u003d source.getRating().value;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        position \u003d source.getPosition().value;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        jerseyNumber \u003d source.getJerseyNumber().value;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        avatar \u003d source.getAvatar().getValue();"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"lohtianwei"},"content":"        if (phonePrivacy \u003d\u003d null) {"},{"lineNumber":133,"author":{"gitId":"lohtianwei"},"content":"            phonePrivacy \u003d false;"},{"lineNumber":134,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":136,"author":{"gitId":"lohtianwei"},"content":"        if (emailPrivacy \u003d\u003d null) {"},{"lineNumber":137,"author":{"gitId":"lohtianwei"},"content":"            emailPrivacy \u003d false;"},{"lineNumber":138,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":140,"author":{"gitId":"lohtianwei"},"content":"        if (addressPrivacy \u003d\u003d null) {"},{"lineNumber":141,"author":{"gitId":"lohtianwei"},"content":"            addressPrivacy \u003d false;"},{"lineNumber":142,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":144,"author":{"gitId":"lohtianwei"},"content":"        if (remarkPrivacy \u003d\u003d null) {"},{"lineNumber":145,"author":{"gitId":"lohtianwei"},"content":"            remarkPrivacy \u003d false;"},{"lineNumber":146,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":148,"author":{"gitId":"lohtianwei"},"content":"        if (ratingPrivacy \u003d\u003d null) {"},{"lineNumber":149,"author":{"gitId":"lohtianwei"},"content":"            ratingPrivacy \u003d false;"},{"lineNumber":150,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"lohtianwei"},"content":"        final Phone phone \u003d new Phone(this.phone, this.phonePrivacy);"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"lohtianwei"},"content":"        final Email email \u003d new Email(this.email, this.emailPrivacy);"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"lohtianwei"},"content":"        final Address address \u003d new Address(this.address, this.addressPrivacy);"},{"lineNumber":184,"author":{"gitId":"lohtianwei"},"content":"        final Remark remark \u003d new Remark(this.remark, this.remarkPrivacy);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        final TeamName teamName \u003d new TeamName(this.teamName);"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        if (this.rating \u003d\u003d null) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        if (!Rating.isValidRating(this.rating)) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"lohtianwei"},"content":"        final Rating rating \u003d new Rating(this.rating, this.ratingPrivacy);"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        if (this.position \u003d\u003d null) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                    Position.class.getSimpleName()));"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        if (!Position.isValidPosition(this.position)) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Position.MESSAGE_POSITION_CONSTRAINTS);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        final Position position \u003d new Position(this.position);"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        if (this.jerseyNumber \u003d\u003d null) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                    JerseyNumber.class.getSimpleName()));"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        if (!JerseyNumber.isValidJerseyNumber(this.jerseyNumber)) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(JerseyNumber.MESSAGE_JERSEY_NUMBER_CONSTRAINTS);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        final JerseyNumber jerseyNumber \u003d new JerseyNumber(this.jerseyNumber);"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"        if (this.avatar \u003d\u003d null) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                    Avatar.class.getSimpleName()));"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        if (!Avatar.isValidAvatar(this.avatar)) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Avatar.MESSAGE_AVATAR_CONSTRAINTS);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        final Avatar avatar \u003d new Avatar(this.avatar);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        return new Person(name, phone, email, address, remark, teamName, tags, rating, position, jerseyNumber, avatar);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":240,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":34,"-":209}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"codeeong"},"content":"    @XmlElement"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"codeeong"},"content":"    @XmlElement"},{"lineNumber":17,"author":{"gitId":"codeeong"},"content":"    private String tagColour;"},{"lineNumber":18,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":27,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":31,"author":{"gitId":"codeeong"},"content":"        this.tagColour \u003d \"teal\";"},{"lineNumber":32,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":34,"author":{"gitId":"codeeong"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"codeeong"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName} and {@code tagColour}."},{"lineNumber":36,"author":{"gitId":"codeeong"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /** @@author Codee */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public XmlAdaptedTag(String tagName, String tagColour) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.tagColour \u003d tagColour;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        tagColour \u003d source.getTagColour();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagColour(tagColour)) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_COLOUR_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new Tag(tagName, tagColour);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":12,"-":69}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTeam.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":13,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":14,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * JAXB-friendly adapted version of the Team"},{"lineNumber":16,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class XmlAdaptedTeam {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Team\u0027s %s field is missing!\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private String teamName;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e players \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Constructs an XmlAdaptedTeam."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public XmlAdaptedTeam() {}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code XmlAdaptedTeam} with the given {@code teamName}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public XmlAdaptedTeam(String teamName, List\u003cXmlAdaptedPerson\u003e persons) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.teamName \u003d teamName;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (persons !\u003d null) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            this.players \u003d new ArrayList\u003c\u003e(persons);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Converts a given Team into this class for JAXB use."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedTeam"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public XmlAdaptedTeam(Team source) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        teamName \u003d source.getTeamName().toString();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        players \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        for (Person person : source.getTeamPlayers()) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            players.add(new XmlAdaptedPerson(person));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Team object."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Team toModelType() throws IllegalValueException {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (this.teamName \u003d\u003d null) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                    TeamName.class.getSimpleName())));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!TeamName.isValidName(this.teamName)) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(TeamName.MESSAGE_TEAM_NAME_CONSTRAINTS);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        final TeamName teamName \u003d new TeamName(this.teamName);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        final List\u003cPerson\u003e teamPlayers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        for (XmlAdaptedPerson player : players) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            teamPlayers.add(player.toModelType());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return new Team(teamName, teamPlayers);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (!(other instanceof XmlAdaptedTeam)) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        XmlAdaptedTeam otherTeam \u003d (XmlAdaptedTeam) other;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return Objects.equals(teamName, otherTeam.teamName)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                \u0026\u0026 players.equals(otherTeam.players);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":13,"-":80}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":2,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /** @@author Codee */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private List\u003cXmlAdaptedTeam\u003e teams;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @XmlElement"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        teams \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Conversion"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /** @@author Codee */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        teams.addAll(src.getTeamList().stream().map(XmlAdaptedTeam::new).collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        for (XmlAdaptedTeam tm : teams) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            addressBook.createTeam(tm.toModelType());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 teams.equals(otherAb.teams);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":1,"-":84}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":"import javafx.scene.control.Menu;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"codeeong"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":17,"author":{"gitId":"codeeong"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":22,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":36,"author":{"gitId":"codeeong"},"content":"    private static String currentTheme \u003d \"view/DarkTheme.css\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Config config;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"codeeong"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"codeeong"},"content":"    private Menu mtmLogo;"},{"lineNumber":51,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"codeeong"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitId":"codeeong"},"content":"    private StackPane teamDisplayPlaceholder;"},{"lineNumber":66,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"codeeong"},"content":"    @FXML"},{"lineNumber":71,"author":{"gitId":"codeeong"},"content":"    private VBox mainWindow;"},{"lineNumber":72,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.config \u003d config;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":109,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":114,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":115,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":116,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":117,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":118,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":119,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        //@@author Codee"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        currentTheme \u003d \"view/\" + prefs.getAddressBookTheme();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        mainWindow.getStylesheets().add(currentTheme);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        mainWindow.getStylesheets().add(\"view/Extensions.css\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        final Image image \u003d new Image(\"images/MyTeamManagerLogo.png\", true);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        mtmLogo.setGraphic(new ImageView(image));"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        mtmLogo.setDisable(true);"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        //@@author"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"codeeong"},"content":"        TeamDisplay teamDisplay \u003d new TeamDisplay(logic.getInitTeamList());"},{"lineNumber":149,"author":{"gitId":"codeeong"},"content":"        teamDisplayPlaceholder.getChildren().add(teamDisplay.getRoot());"},{"lineNumber":150,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    void hide() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":168,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    /** @@author Codee */"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * @returns the {@code currentTheme}."},{"lineNumber":181,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public static String getCurrentTheme() {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        return currentTheme;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void handleChangeThemeRequestEvent(ChangeThemeEvent event) throws CommandException {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        mainWindow.getStylesheets().remove(currentTheme);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        prefs.setAddressBookTheme(event.theme + \"Theme.css\");"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        currentTheme \u003d \"view/\" + prefs.getAddressBookTheme();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        mainWindow.getStylesheets().add(currentTheme);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":195,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":198,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * Opens the help window."},{"lineNumber":206,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        if (helpWindow \u003d\u003d null) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            helpWindow \u003d new HelpWindow();"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        helpWindow.show();"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":221,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        return this.personListPanel;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        handleHelp();"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":20,"-":216}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":20,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.ChangeTagColourEvent;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":31,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":41,"author":{"gitId":"codeeong"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonCard.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private Label teamName;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Label rating;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private Label position;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private Label jerseyNumber;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private Circle avatar;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":"        if (person.getRating().isPrivate()) {"},{"lineNumber":68,"author":{"gitId":"lohtianwei"},"content":"            rating.setText(person.getRating().toString());"},{"lineNumber":69,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            rating.setText(person.getRating().value);"},{"lineNumber":71,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"lohtianwei"},"content":"        teamName.setText(person.getTeamName().fullName);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        position.setText(person.getPosition().getPositionName());"},{"lineNumber":74,"author":{"gitId":"codeeong"},"content":"        initTags(person);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        setContactImage(person.getAvatar().getValue());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void setContactImage(String path) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Image img \u003d null;"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            if (new File(path).isFile()) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                img \u003d new Image(new File(path).toURI().toURL().toString());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                img \u003d new Image(getClass().getResource(\"/images/placeholder_test.png\").toString());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        } catch (MalformedURLException e) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            img \u003d new Image(getClass().getResource(\"/images/placeholder_test.png\").toString());"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        avatar.setVisible(true);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        avatar.setFill(new ImagePattern(img));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        avatar.setVisible(true);"},{"lineNumber":95,"author":{"gitId":"codeeong"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":96,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":98,"author":{"gitId":"codeeong"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"codeeong"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":100,"author":{"gitId":"codeeong"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"codeeong"},"content":"    private void initTags(Person person) {"},{"lineNumber":102,"author":{"gitId":"codeeong"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":103,"author":{"gitId":"codeeong"},"content":"            Label tagLabel \u003d new Label(tag.getTagName());"},{"lineNumber":104,"author":{"gitId":"codeeong"},"content":"            tagLabel.getStyleClass().add(tag.getTagColour());"},{"lineNumber":105,"author":{"gitId":"codeeong"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":106,"author":{"gitId":"codeeong"},"content":"        });"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /** @@author Codee */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void handleColourChangeEvent(ChangeTagColourEvent event) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d person.getTags();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        int i \u003d 0;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        for (Iterator\u003cTag\u003e it \u003d tagSet.iterator(); it.hasNext();) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            Tag tag \u003d it.next();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            if (tag.getTagName().equals(event.tagName)) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                tags.getChildren().remove(i);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                Label newTagLabel \u003d new Label(event.tagName);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                newTagLabel.getStyleClass().add(event.tagColour);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                tags.getChildren().add(i, newTagLabel);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            i++;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":5,"codeeong":25,"-":114}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitId":"codeeong"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.PersonDetailsChangedNoParamEvent;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"codeeong"},"content":"    private PlayerDetails playerDetails;"},{"lineNumber":30,"author":{"gitId":"codeeong"},"content":"    private Integer selectedCardIndex;"},{"lineNumber":31,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"codeeong"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"codeeong"},"content":"    private StackPane playerDetailsPlaceholder;"},{"lineNumber":37,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        setConnections(personList);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private void setConnections(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":46,"author":{"gitId":"-"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":56,"author":{"gitId":"codeeong"},"content":"                        playerDetailsPlaceholder.getChildren().clear();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":59,"author":{"gitId":"codeeong"},"content":"                        playerDetails \u003d new PlayerDetails(newValue.person);"},{"lineNumber":60,"author":{"gitId":"codeeong"},"content":"                        playerDetailsPlaceholder.getChildren().add(playerDetails.getRoot());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                });"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":72,"author":{"gitId":"codeeong"},"content":"            this.selectedCardIndex \u003d index;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    //@@author Codee"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private void handlePersonDetailsChangedNoParamEvent(PersonDetailsChangedNoParamEvent event) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        PersonCard newPersonCard \u003d personListView.getItems().get(selectedCardIndex);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        playerDetailsPlaceholder.getChildren().clear();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        playerDetails \u003d new PlayerDetails(newPersonCard.person);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        playerDetailsPlaceholder.getChildren().add(playerDetails.getRoot());"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    //@author"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                setGraphic(null);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                setText(null);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":12,"-":98}},{"path":"src/main/java/seedu/address/ui/PlayerDetails.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.PersonDetailsChangedEvent;"},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":13,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"codeeong"},"content":" * The Browser Panel of the App."},{"lineNumber":15,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PlayerDetails extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PlayerDetails.fxml\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Person personBeforeChange;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Label jerseyNumber;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Label remark;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"lohtianwei"},"content":"    //@@author lohtianwei"},{"lineNumber":48,"author":{"gitId":"lohtianwei"},"content":"    public PlayerDetails(Person person) {"},{"lineNumber":49,"author":{"gitId":"lohtianwei"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitId":"lohtianwei"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":51,"author":{"gitId":"lohtianwei"},"content":"        this.person \u003d person;"},{"lineNumber":52,"author":{"gitId":"lohtianwei"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"        jerseyNumber.setText(\"Jersey Number: \" + person.getJerseyNumber().value);"},{"lineNumber":54,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":"        if (person.getPhone().isPrivate()) {"},{"lineNumber":56,"author":{"gitId":"lohtianwei"},"content":"            phone.setText(person.getPhone().toString());"},{"lineNumber":57,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":58,"author":{"gitId":"lohtianwei"},"content":"            phone.setText(person.getPhone().value);"},{"lineNumber":59,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":61,"author":{"gitId":"lohtianwei"},"content":"        if (person.getAddress().isPrivate()) {"},{"lineNumber":62,"author":{"gitId":"lohtianwei"},"content":"            address.setText(person.getAddress().toString());"},{"lineNumber":63,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":"            address.setText(person.getAddress().value);"},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":"        if (person.getEmail().isPrivate()) {"},{"lineNumber":68,"author":{"gitId":"lohtianwei"},"content":"            email.setText(person.getEmail().toString());"},{"lineNumber":69,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"lohtianwei"},"content":"            email.setText(person.getEmail().value);"},{"lineNumber":71,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":73,"author":{"gitId":"lohtianwei"},"content":"        if (person.getRemark().isPrivate()) {"},{"lineNumber":74,"author":{"gitId":"lohtianwei"},"content":"            remark.setText(\"Remarks: \" + person.getRemark().toString());"},{"lineNumber":75,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":76,"author":{"gitId":"lohtianwei"},"content":"            remark.setText(\"Remarks: \" + person.getRemark().value);"},{"lineNumber":77,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"lohtianwei"},"content":"        personBeforeChange \u003d this.person;"},{"lineNumber":79,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    //@@author Codee"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void handlePersonDetailsChangedEvent(PersonDetailsChangedEvent event) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (event.getPerson().getName().fullName.equals(person.getName().fullName)) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            name.setText((event.getPerson().getName().toString()));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            phone.setText(event.getPerson().getPhone().toString());"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            jerseyNumber.setText(\"Jersey Number: \" + event.getPerson().getJerseyNumber().toString());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            address.setText(event.getPerson().getAddress().toString());"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            email.setText(event.getPerson().getEmail().toString());"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            remark.setText(\"Remarks: \" + event.getPerson().getRemark().toString());"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"},{"lineNumber":94,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"lohtianwei":34,"codeeong":15,"-":45}},{"path":"src/main/java/seedu/address/ui/TeamDisplay.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":13,"author":{"gitId":"codeeong"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.ClearTeamsEvent;"},{"lineNumber":17,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.DeselectTeamEvent;"},{"lineNumber":18,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.HighlightSelectedTeamEvent;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.RemoveSelectedTeamEvent;"},{"lineNumber":20,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.ShowNewTeamNameEvent;"},{"lineNumber":21,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.UndoTeamsEvent;"},{"lineNumber":22,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":23,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":24,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"codeeong"},"content":" * A ui for displaying the team currently chosen"},{"lineNumber":26,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class TeamDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(TeamDisplay.class);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"TeamDisplay.fxml\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private ObservableList\u003cTeam\u003e teamList;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private FlowPane teams;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public TeamDisplay(ObservableList\u003cTeam\u003e teamList) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.teamList \u003d teamList;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        initTeams();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        getTeams();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private void initTeams() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        for (Team t: this.teamList) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            Label teamLabel \u003d new Label(t.getTeamName().toString());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            teamLabel.setStyle(\"-fx-text-fill: #3f7bbf\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            teams.getChildren().add(teamLabel);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            teams.setHgap(10);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getTeams() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        List\u003cString\u003e listOfTeams \u003d FXCollections.observableArrayList();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        for (Team t: teamList) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            listOfTeams.add(t.getTeamName().toString());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return listOfTeams;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private void handleShowNewTeamEvent(ShowNewTeamNameEvent event) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        Label newTeamLabel \u003d new Label(event.teamName);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        newTeamLabel.getStyleClass();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        teams.getChildren().add(newTeamLabel);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private void handleHighlightSelectedTeamEvent(HighlightSelectedTeamEvent event) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c teamList.size(); i++) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            if (event.teamName.equals(teamList.get(i).getTeamName().toString())) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                teams.getChildren().remove(i);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                Label newTeamLabel \u003d new Label(event.teamName);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                newTeamLabel.getStyleClass().add(\"selected\");"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                teams.getChildren().add(i, newTeamLabel);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                teams.getChildren().remove(i);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                Label newTeamLabel \u003d new Label(teamList.get(i).getTeamName().toString());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                newTeamLabel.getStyleClass();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                teams.getChildren().add(i, newTeamLabel);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private void handleDeselectTeamEvent(DeselectTeamEvent event) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c teamList.size(); i++) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            teams.getChildren().remove(i);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            Label newTeamLabel \u003d new Label(teamList.get(i).getTeamName().toString());"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            newTeamLabel.getStyleClass();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            teams.getChildren().add(i, newTeamLabel);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void handleRemoveSelectedTeamEvent(RemoveSelectedTeamEvent event) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c teams.getChildren().size(); i++) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            if (teamList.get(i).getTeamName().equals(event.teamName)) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                teams.getChildren().remove(i);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    private void handleClearTeamsEvent(ClearTeamsEvent event) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        teams.getChildren().clear();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private void handleUndoTeamsEvent(UndoTeamsEvent event) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        teams.getChildren().clear();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        initTeams();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        getTeams();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"},{"lineNumber":124,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"codeeong":23,"-":101}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitId":"codeeong"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/football.png\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                                               String contentText) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        alert.showAndWait();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                event.exception);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":1,"-":118}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":"    private final TeamDisplayHandle teamDisplayBar;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitId":"codeeong"},"content":"        teamDisplayBar \u003d new TeamDisplayHandle(getChildNode(TeamDisplayHandle.TEAM_DISPLAY_ID));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":2,"-":46}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":17,"author":{"gitId":"codeeong"},"content":"    private static final String RATING_FIELD_ID \u003d \"#rating\";"},{"lineNumber":18,"author":{"gitId":"codeeong"},"content":"    private static final String POSITION_FIELD_ID \u003d \"#position\";"},{"lineNumber":19,"author":{"gitId":"codeeong"},"content":"    private static final String TEAMNAME_FIELD_ID \u003d \"#teamName\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitId":"codeeong"},"content":"    private final Label positionLabel;"},{"lineNumber":24,"author":{"gitId":"codeeong"},"content":"    private final Label ratingLabel;"},{"lineNumber":25,"author":{"gitId":"codeeong"},"content":"    private final Label teamNameLabel;"},{"lineNumber":26,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super(cardNode);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":34,"author":{"gitId":"codeeong"},"content":"        this.positionLabel \u003d getChildNode(POSITION_FIELD_ID);"},{"lineNumber":35,"author":{"gitId":"codeeong"},"content":"        this.ratingLabel \u003d getChildNode(RATING_FIELD_ID);"},{"lineNumber":36,"author":{"gitId":"codeeong"},"content":"        this.teamNameLabel \u003d getChildNode(TEAMNAME_FIELD_ID);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public String getId() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return idLabel.getText();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String getName() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"codeeong"},"content":"    public String getPosition() {"},{"lineNumber":55,"author":{"gitId":"codeeong"},"content":"        return positionLabel.getText();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"codeeong"},"content":"    public String getRating() {"},{"lineNumber":59,"author":{"gitId":"codeeong"},"content":"        return ratingLabel.getText();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"codeeong"},"content":"    public String getTeamName() {"},{"lineNumber":63,"author":{"gitId":"codeeong"},"content":"        return teamNameLabel.getText();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return tagLabels"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .map(Label::getText)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":73,"author":{"gitId":"codeeong"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":74,"author":{"gitId":"codeeong"},"content":"        return tagLabels"},{"lineNumber":75,"author":{"gitId":"codeeong"},"content":"                .stream()"},{"lineNumber":76,"author":{"gitId":"codeeong"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":77,"author":{"gitId":"codeeong"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":78,"author":{"gitId":"codeeong"},"content":"                .findFirst()"},{"lineNumber":79,"author":{"gitId":"codeeong"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":80,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":25,"-":56}},{"path":"src/test/java/guitests/guihandles/PlayerDetailsHandle.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":" * Provides a handle to a player details pane."},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"//@@author Codee"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class PlayerDetailsHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String PLAYER_DETAILS_DISPLAY_ID \u003d \"#playerDetails\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String JERSEY_FIELD_ID \u003d \"#jerseyNumber\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String REMARK_FIELD_ID \u003d \"#remark\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Label jerseyLabel;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Label remarkLabel;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public PlayerDetailsHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.remarkLabel \u003d getChildNode(REMARK_FIELD_ID);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.jerseyLabel \u003d getChildNode(JERSEY_FIELD_ID);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public String getPhone() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public String getName() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public String getAddress() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public String getJerseyNumber() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return jerseyLabel.getText().substring(15);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String getRemarks() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return remarkLabel.getText().substring(9);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public String getEmail() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":8,"-":56}},{"path":"src/test/java/guitests/guihandles/TeamDisplayHandle.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":" * Provides a handle for {@code TeamDisplayHandle} containing the list of {@code Teams}."},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class TeamDisplayHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String TEAM_DISPLAY_ID \u003d \"#teams\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final List\u003cLabel\u003e teamLabels;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public TeamDisplayHandle(Node teamDisplayNode) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(teamDisplayNode);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        Region teamContainer \u003d getChildNode(TEAM_DISPLAY_ID);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.teamLabels \u003d teamContainer"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getTeams() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return teamLabels"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                .map(Label::getText)"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":12,"-":25}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitId":"codeeong"},"content":"        String defaultConfigAsString \u003d \"App title : My Team Manager\\n\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":1,"-":31}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":74,"author":{"gitId":"codeeong"},"content":"        assertEquals(0, dataFromFile.getTeamList().size());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":81,"author":{"gitId":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":83,"author":{"gitId":"-"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":90,"author":{"gitId":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":92,"author":{"gitId":"-"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":99,"author":{"gitId":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":101,"author":{"gitId":"-"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":133,"author":{"gitId":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * objects."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":1,"-":145}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.exceptions.NoPlayerException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.team.exceptions.TeamNotFoundException;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        new AddCommand(null);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return command;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"lohtianwei"},"content":"        @Override"},{"lineNumber":111,"author":{"gitId":"lohtianwei"},"content":"        public void sortPlayers(String field, String order) throws NoPlayerException {"},{"lineNumber":112,"author":{"gitId":"lohtianwei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":115,"author":{"gitId":"lohtianwei"},"content":"        @Override"},{"lineNumber":116,"author":{"gitId":"lohtianwei"},"content":"        public void lockAddressBookModel() {"},{"lineNumber":117,"author":{"gitId":"lohtianwei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":120,"author":{"gitId":"lohtianwei"},"content":"        @Override"},{"lineNumber":121,"author":{"gitId":"lohtianwei"},"content":"        public void unlockAddressBookModel() {"},{"lineNumber":122,"author":{"gitId":"lohtianwei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":125,"author":{"gitId":"lohtianwei"},"content":"        @Override"},{"lineNumber":126,"author":{"gitId":"lohtianwei"},"content":"        public boolean getLockState() {"},{"lineNumber":127,"author":{"gitId":"lohtianwei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitId":"lohtianwei"},"content":"            return false;"},{"lineNumber":129,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":131,"author":{"gitId":"lohtianwei"},"content":"        @Override"},{"lineNumber":132,"author":{"gitId":"lohtianwei"},"content":"        public UserPrefs getUserPrefs() {"},{"lineNumber":133,"author":{"gitId":"lohtianwei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitId":"lohtianwei"},"content":"            return null;"},{"lineNumber":135,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"codeeong"},"content":"        @Override"},{"lineNumber":166,"author":{"gitId":"codeeong"},"content":"        public ObservableList\u003cTeam\u003e getInitTeamList() {"},{"lineNumber":167,"author":{"gitId":"codeeong"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitId":"codeeong"},"content":"            return null;"},{"lineNumber":169,"author":{"gitId":"codeeong"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(TeamName targetTeam) throws TeamNotFoundException {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public void createTeam(Team team) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            fail(\"This method should not be be called.\");"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public void assignPersonToTeam(Person person, TeamName teamName) throws DuplicatePersonException {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        public void unassignPersonFromTeam(Person person) throws TeamNotFoundException {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        public void removeTeam(TeamName teamName) throws TeamNotFoundException {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public void renameTeam(Team targetTeam, TeamName updatedTeamName) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"codeeong"},"content":"        @Override"},{"lineNumber":212,"author":{"gitId":"codeeong"},"content":"        public boolean setTagColour(Tag tag, String colour) {"},{"lineNumber":213,"author":{"gitId":"codeeong"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":214,"author":{"gitId":"codeeong"},"content":"            return false;"},{"lineNumber":215,"author":{"gitId":"codeeong"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":220,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        public void assignPersonToTeam(Person person, TeamName teamName)"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":29,"codeeong":12,"-":216}},{"path":"src/test/java/seedu/address/logic/commands/ChangeThemeCommandTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ChangeThemeCommandTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private String[] listThemes \u003d { \"Light\", \"Dark\" };"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void execute_validTheme_success() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertExecutionSuccess(listThemes[0]);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_invalidTheme_failure() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertExecutionFailure(\"FakeTheme\", Messages.MESSAGE_INVALID_THEME);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        ChangeThemeCommand[] listThemeCommands \u003d new ChangeThemeCommand[2];"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 2; i++) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            listThemeCommands[i] \u003d new ChangeThemeCommand(listThemes[i]);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 2; i++) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            assertTrue(listThemeCommands[i].equals(new ChangeThemeCommand(listThemes[i])));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 2; i++) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            assertFalse(listThemeCommands[i].equals(1));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 2; i++) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            assertFalse(listThemeCommands[i].equals(null));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different theme -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        int j \u003d 1;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 2; i++) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (i !\u003d j) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                assertFalse(listThemeCommands[i].equals(listThemeCommands[j]));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            j--;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Executes a {@code ChangeThemeCommand} with the given {@code theme}."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private void assertExecutionSuccess(String theme) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        ChangeThemeCommand changethemeCommand \u003d new ChangeThemeCommand(theme);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d changethemeCommand.execute();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            assertEquals(String.format(ChangeThemeCommand.MESSAGE_THEME_SUCCESS, theme),"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Executes a {@code ChangeThemeCommand} with the given {@code theme}."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void assertExecutionFailure(String theme, String expectedMessage) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        ChangeThemeCommand changethemeCommand \u003d new ChangeThemeCommand(theme);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            changethemeCommand.execute();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":12,"-":77}},{"path":"src/test/java/seedu/address/logic/commands/KeyCommandTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"lohtianwei"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"//@@author lohtianwei"},{"lineNumber":4,"author":{"gitId":"lohtianwei"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"lohtianwei"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":10,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":13,"author":{"gitId":"lohtianwei"},"content":"public class KeyCommandTest {"},{"lineNumber":14,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":"    private Model model;"},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":17,"author":{"gitId":"lohtianwei"},"content":"    @Before"},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":"    public void start() {"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"        model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"lohtianwei"},"content":"    public void checkKey() throws Exception {"},{"lineNumber":24,"author":{"gitId":"lohtianwei"},"content":"        //checks that default lock state is false"},{"lineNumber":25,"author":{"gitId":"lohtianwei"},"content":"        assertFalse(model.getLockState());"},{"lineNumber":26,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":"        //checks that key can lock MTM"},{"lineNumber":28,"author":{"gitId":"lohtianwei"},"content":"        model.lockAddressBookModel();"},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(model.getLockState());"},{"lineNumber":30,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":"        //checks that key can unlock MTM"},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":"        model.unlockAddressBookModel();"},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":"        assertFalse(model.getLockState());"},{"lineNumber":34,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":"        //checks that toggling works"},{"lineNumber":36,"author":{"gitId":"lohtianwei"},"content":"        model.lockAddressBookModel();"},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":"        model.unlockAddressBookModel();"},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":"        assertFalse(model.getLockState());"},{"lineNumber":39,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":40,"author":{"gitId":"lohtianwei"},"content":"        model.unlockAddressBookModel();"},{"lineNumber":41,"author":{"gitId":"lohtianwei"},"content":"        model.lockAddressBookModel();"},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(model.getLockState());"},{"lineNumber":43,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":44}},{"path":"src/test/java/seedu/address/logic/commands/RemarkCommandTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_EMPTY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"//@@author jordancjq"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand."},{"lineNumber":35,"author":{"gitId":"-"},"content":" */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class RemarkCommandTest {"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_addRemarkUnfilteredList_success() throws Exception {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Person remarkedPerson \u003d personInList.withRemark(VALID_REMARK_AMY).build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(indexLastPerson, remarkedPerson.getRemark().toString());"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, remarkedPerson);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        expectedModel.updatePerson(lastPerson, remarkedPerson);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_deleteRemarkUnfilteredList_success() throws Exception {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Person remarkedPerson \u003d personInList.withRemark(VALID_REMARK_EMPTY).build();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(indexLastPerson, remarkedPerson.getRemark().toString());"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, remarkedPerson);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        expectedModel.updatePerson(lastPerson, remarkedPerson);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person remarkedPerson \u003d new PersonBuilder(personInFilteredList).withRemark(VALID_REMARK_BOB).build();"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, remarkedPerson.getRemark().toString());"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, remarkedPerson);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        expectedModel.updatePerson(personInFilteredList, remarkedPerson);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"codeeong"},"content":"        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":91,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, VALID_REMARK_BOB);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertCommandFailure(remarkCommand, model, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Remark filtered list where index is larger than size of filtered list,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, VALID_REMARK_BOB);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandFailure(remarkCommand, model, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Person personToRemark \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Person remarkedPerson \u003d new PersonBuilder(personToRemark).withRemark(VALID_REMARK_AMY).build();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_REMARK_AMY);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // remark -\u003e first person remarked"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        remarkCommand.execute();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        undoRedoStack.push(remarkCommand);"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // redo -\u003e same first person remarked again"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        expectedModel.updatePerson(personToRemark, remarkedPerson);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, VALID_REMARK_EMPTY);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // execution failed -\u003e remarkCommand not pushed into undoRedoStack"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertCommandFailure(remarkCommand, model, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * 1. Updates {@code Person#remark} from a filtered list."},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * 2. Undo the update."},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously updated person in the"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * 4. Redo the update. This ensures {@code RedoCommand} updates the person object regardless of indexing."},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonRemarked() throws Exception {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_REMARK_BOB);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        Person personToRemark \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        Person remarkedPerson \u003d new PersonBuilder(personToRemark).withRemark(VALID_REMARK_BOB).build();"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // remark -\u003e remarks second person in unfiltered person list / first person in filtered person list"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        remarkCommand.execute();"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        undoRedoStack.push(remarkCommand);"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        expectedModel.updatePerson(personToRemark, remarkedPerson);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToRemark);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        // redo -\u003e remarks same second person in unfiltered person list"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        final RemarkCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_REMARK_AMY);"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        RemarkCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_REMARK_AMY);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_PERSON, new Remark(VALID_REMARK_AMY))));"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        // different remark -\u003e returns false"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_BOB))));"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * Returns an {@code RemarkCommand} with parameters {@code index} and {@code remark}."},{"lineNumber":214,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    private RemarkCommand prepareCommand(Index index, String remark) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(index, new Remark(remark));"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        remarkCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        return remarkCommand;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":2,"-":218}},{"path":"src/test/java/seedu/address/logic/commands/SetCommandTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":13,"author":{"gitId":"codeeong"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":15,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":23,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"codeeong"},"content":" * This is the unit test for {@code SetCommand}."},{"lineNumber":25,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class SetCommandTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Tag tagOne \u003d new Tag(\"testTagOne\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Tag tagTwo \u003d new Tag(\"testTagTwo\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        SetCommand testCommand \u003d new SetCommand(tagOne, \"teal\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        SetCommand testCommandTwo \u003d new SetCommand(tagOne, \"teal\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        //Test to ensure command is strictly a SetCommand"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(testCommand.equals(new AddCommand(CARL)));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(testCommand.equals(new ClearCommand()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(testCommand.equals(new DeleteCommand(INDEX_FIRST_PERSON)));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(testCommand.equals(new HistoryCommand()));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(testCommand.equals(new HelpCommand()));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(testCommand.equals(new RedoCommand()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(testCommand.equals(new UndoCommand()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(testCommand.equals(new ListCommand()));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(testCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_AMY)));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        //Test to check that different tag string returns false"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(testCommand.equals(new SetCommand(tagTwo, \"teal\")));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(testCommandTwo.equals(new SetCommand(tagTwo, \"teal\")));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        //Test to check that different color strings returns false"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(testCommand.equals(new SetCommand(tagOne, \"red\")));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertFalse(testCommandTwo.equals(new SetCommand(tagTwo, \"red\")));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void checkCommandResult() throws CommandException {"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        //Check if the result message is correct when there is no tags found"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        SetCommand command \u003d new SetCommand(new Tag(\"blablabla\"), \"teal\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(command.execute().feedbackToUser.equals(\"tag is invalid! Please input a valid tag name!\"));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        //When tags is present"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        command \u003d new SetCommand(new Tag(\"friends\"), \"red\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(command.execute().feedbackToUser.equals(\"No such tag\"));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertTrue(command.execute().feedbackToUser.equals(\"tag [friends] colour changed to red\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        //Check if friends tags are set to color"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        command \u003d new SetCommand(new Tag(\"friends\"), \"teal\");"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(command.execute().feedbackToUser.equals(\"tag [friends] colour changed to teal\"));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        for (Tag tag : model.getAddressBook().getTagList()) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            if (\"friends\".equals(tag.tagName)) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                assertTrue(tag.getTagColour().equals(\"teal\"));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                assertFalse(tag.getTagColour().equals(\"pink\"));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        resetAllTagsToDefault();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * This method allows all tags to be set to the default colour \"teal\""},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void resetAllTagsToDefault() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        ObservableList\u003cTag\u003e allTags \u003d model.getAddressBook().getTagList();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        for (Tag t : allTags) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            t.changeTagColour(\"teal\");"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":25,"-":75}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"lohtianwei"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"//@@author lohtianwei"},{"lineNumber":4,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.commands.SortCommand.MESSAGE_SUCCESS;"},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.testutil.TypicalPersons.getEmptyAddressBook;"},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.testutil.TypicalPersons.getSortedAddressBook;"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":10,"author":{"gitId":"lohtianwei"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitId":"lohtianwei"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":14,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":"public class SortCommandTest {"},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":23,"author":{"gitId":"lohtianwei"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitId":"lohtianwei"},"content":"    public ExpectedException error \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":26,"author":{"gitId":"lohtianwei"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":"    private Model emptyModel \u003d new ModelManager(getEmptyAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"lohtianwei"},"content":"    private Model sortedByNameDesc \u003d new ModelManager("},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":"            getSortedAddressBook(\"name\", \"desc\"), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":"    private Model sortedByAdd \u003d new ModelManager("},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":"            getSortedAddressBook(\"address\", \"asc\"), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":"    private Model sortedByAddDesc \u003d new ModelManager("},{"lineNumber":34,"author":{"gitId":"lohtianwei"},"content":"            getSortedAddressBook(\"address\", \"desc\"), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":36,"author":{"gitId":"lohtianwei"},"content":"    private Model sortedByEmail \u003d new ModelManager(getSortedAddressBook(\"email\", \"asc\"), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":"    private Model sortedByEmailDesc \u003d new ModelManager("},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":"            getSortedAddressBook(\"email\", \"desc\"), new UserPrefs());"},{"lineNumber":39,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":40,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"lohtianwei"},"content":"    public void noPlayers() throws CommandException {"},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":"        error.expect(CommandException.class);"},{"lineNumber":43,"author":{"gitId":"lohtianwei"},"content":"        prepareCommand(\"name\", \"asc\", emptyModel).execute();"},{"lineNumber":44,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":46,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"lohtianwei"},"content":"    public void emptySortField_throwsNullPointerEx() {"},{"lineNumber":48,"author":{"gitId":"lohtianwei"},"content":"        error.expect(NullPointerException.class);"},{"lineNumber":49,"author":{"gitId":"lohtianwei"},"content":"        new SortCommand(\"name\", null);"},{"lineNumber":50,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":52,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"    public void emptySortOrder_throwsNullPointerEx() {"},{"lineNumber":54,"author":{"gitId":"lohtianwei"},"content":"        error.expect(NullPointerException.class);"},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":"        new SortCommand(null, \"asc\");"},{"lineNumber":56,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":58,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"lohtianwei"},"content":"    public void sortByName_success() throws Exception {"},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":"        SortCommand so \u003d prepareCommand(\"name\", \"asc\", model);"},{"lineNumber":61,"author":{"gitId":"lohtianwei"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS, \"name\", \"asc\");"},{"lineNumber":62,"author":{"gitId":"lohtianwei"},"content":"        assertCommandSuccess(so, model, expected, model);"},{"lineNumber":63,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":"    public void sortByNameDesc_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":"        SortCommand so \u003d prepareCommand(\"name\", \"desc\", model);"},{"lineNumber":68,"author":{"gitId":"lohtianwei"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS, \"name\", \"desc\");"},{"lineNumber":69,"author":{"gitId":"lohtianwei"},"content":"        assertCommandSuccess(so, model, expected, sortedByNameDesc);"},{"lineNumber":70,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":72,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"lohtianwei"},"content":"    public void sortByAdd_success() throws Exception {"},{"lineNumber":74,"author":{"gitId":"lohtianwei"},"content":"        SortCommand so \u003d prepareCommand(\"address\", \"asc\", model);"},{"lineNumber":75,"author":{"gitId":"lohtianwei"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS, \"address\", \"asc\");"},{"lineNumber":76,"author":{"gitId":"lohtianwei"},"content":"        assertCommandSuccess(so, model, expected, sortedByAdd);"},{"lineNumber":77,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":79,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"lohtianwei"},"content":"    public void sortByAddDesc_success() throws Exception {"},{"lineNumber":81,"author":{"gitId":"lohtianwei"},"content":"        SortCommand so \u003d prepareCommand(\"address\", \"desc\", model);"},{"lineNumber":82,"author":{"gitId":"lohtianwei"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS, \"address\", \"desc\");"},{"lineNumber":83,"author":{"gitId":"lohtianwei"},"content":"        assertCommandSuccess(so, model, expected, sortedByAddDesc);"},{"lineNumber":84,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":86,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"lohtianwei"},"content":"    public void sortByEmail_success() throws Exception {"},{"lineNumber":88,"author":{"gitId":"lohtianwei"},"content":"        SortCommand so \u003d prepareCommand(\"email\", \"asc\", model);"},{"lineNumber":89,"author":{"gitId":"lohtianwei"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS, \"email\", \"asc\");"},{"lineNumber":90,"author":{"gitId":"lohtianwei"},"content":"        assertCommandSuccess(so, model, expected, sortedByEmail);"},{"lineNumber":91,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":93,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"lohtianwei"},"content":"    public void sortByEmailDesc_success() throws Exception {"},{"lineNumber":95,"author":{"gitId":"lohtianwei"},"content":"        SortCommand so \u003d prepareCommand(\"email\", \"desc\", model);"},{"lineNumber":96,"author":{"gitId":"lohtianwei"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS, \"email\", \"desc\");"},{"lineNumber":97,"author":{"gitId":"lohtianwei"},"content":"        assertCommandSuccess(so, model, expected, sortedByEmailDesc);"},{"lineNumber":98,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":100,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"lohtianwei"},"content":"     * Returns a {@code sortCommand} with the parameters {@code field and @code order}."},{"lineNumber":102,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"lohtianwei"},"content":"    private SortCommand prepareCommand(String field, String order, Model model) {"},{"lineNumber":104,"author":{"gitId":"lohtianwei"},"content":"        SortCommand sortCommand \u003d new SortCommand(field, order);"},{"lineNumber":105,"author":{"gitId":"lohtianwei"},"content":"        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":106,"author":{"gitId":"lohtianwei"},"content":"        return sortCommand;"},{"lineNumber":107,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":108}},{"path":"src/test/java/seedu/address/logic/commands/TogglePrivacyCommandTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"lohtianwei"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"//@@author lohtianwei"},{"lineNumber":4,"author":{"gitId":"lohtianwei"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":5,"author":{"gitId":"lohtianwei"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.commands.TogglePrivacyCommand.EditPersonPrivacy;"},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":11,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.testutil.EditPersonPrivacyBuilder;"},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":"public class TogglePrivacyCommandTest {"},{"lineNumber":23,"author":{"gitId":"lohtianwei"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":25,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"lohtianwei"},"content":"    public void editPersonPrivacyTest() {"},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":"        EditPersonPrivacy epp \u003d new EditPersonPrivacy();"},{"lineNumber":28,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":"        assertFalse(epp.anyNonNullField());"},{"lineNumber":30,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":"        EditPersonPrivacy eppBuilder \u003d new EditPersonPrivacyBuilder().setAddressPrivate(\"false\")"},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":"                .setEmailPrivate(\"false\").setPhonePrivate(\"true\").setRatingPrivate(\"false\")"},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":"                .setRemarkPrivate(\"true\").build();"},{"lineNumber":34,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":"        epp.setPrivateAddress(false);"},{"lineNumber":36,"author":{"gitId":"lohtianwei"},"content":"        epp.setPrivateEmail(false);"},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":"        epp.setPrivatePhone(true);"},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":"        epp.setPrivateRating(false);"},{"lineNumber":39,"author":{"gitId":"lohtianwei"},"content":"        epp.setPrivateRemark(true);"},{"lineNumber":40,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":41,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(eppBuilder.getPrivateAddress(), epp.getPrivateAddress());"},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(eppBuilder.getPrivateEmail(), epp.getPrivateEmail());"},{"lineNumber":43,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(eppBuilder.getPrivatePhone(), epp.getPrivatePhone());"},{"lineNumber":44,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(eppBuilder.getPrivateRating(), epp.getPrivateRating());"},{"lineNumber":45,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(eppBuilder.getPrivateRemark(), epp.getPrivateRemark());"},{"lineNumber":46,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":48,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"lohtianwei"},"content":"    public void oneFieldToggledSuccess() throws Exception {"},{"lineNumber":50,"author":{"gitId":"lohtianwei"},"content":"        Index indexLast \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":51,"author":{"gitId":"lohtianwei"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLast.getZeroBased());"},{"lineNumber":52,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"        Person listedPerson \u003d new PersonBuilder().withName(lastPerson.getName().toString())"},{"lineNumber":54,"author":{"gitId":"lohtianwei"},"content":"                .withEmail(lastPerson.getEmail().toString()).withRating(lastPerson.getRating().toString())"},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":"                .withPhone(lastPerson.getPhone().toString()).build();"},{"lineNumber":56,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":57,"author":{"gitId":"lohtianwei"},"content":"        listedPerson.getPhone().setPrivate(true);"},{"lineNumber":58,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":59,"author":{"gitId":"lohtianwei"},"content":"        EditPersonPrivacy epp \u003d new EditPersonPrivacyBuilder(listedPerson).setPhonePrivate(\"true\").build();"},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":"        TogglePrivacyCommand togglePrivacyCommand \u003d new TogglePrivacyCommand(indexLast, epp);"},{"lineNumber":61,"author":{"gitId":"lohtianwei"},"content":"        togglePrivacyCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":62,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":63,"author":{"gitId":"lohtianwei"},"content":"        String expected \u003d String.format(TogglePrivacyCommand.MESSAGE_SUCCESS, listedPerson);"},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":"        expectedModel.updatePerson(lastPerson, listedPerson);"},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":67}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TEAM_ARSENAL;"},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":22,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CreateCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.KeyCommand;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.TogglePrivacyCommand;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":51,"author":{"gitId":"lohtianwei"},"content":"    private static final boolean DEFAULT_LOCK_STATE \u003d false;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person), DEFAULT_LOCK_STATE);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":68,"author":{"gitId":"lohtianwei"},"content":"                + PersonUtil.getPersonDetails(person), DEFAULT_LOCK_STATE);"},{"lineNumber":69,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":70,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":74,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, DEFAULT_LOCK_STATE) instanceof ClearCommand);"},{"lineNumber":75,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", DEFAULT_LOCK_STATE) instanceof ClearCommand);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":80,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS, DEFAULT_LOCK_STATE) instanceof ClearCommand);"},{"lineNumber":81,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\", DEFAULT_LOCK_STATE) instanceof ClearCommand);"},{"lineNumber":82,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":87,"author":{"gitId":"lohtianwei"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(), DEFAULT_LOCK_STATE);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":93,"author":{"gitId":"lohtianwei"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":94,"author":{"gitId":"lohtianwei"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased(), DEFAULT_LOCK_STATE);"},{"lineNumber":95,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":96,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":103,"author":{"gitId":"lohtianwei"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person), DEFAULT_LOCK_STATE);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":105,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":107,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":109,"author":{"gitId":"lohtianwei"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":110,"author":{"gitId":"lohtianwei"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":111,"author":{"gitId":"lohtianwei"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":112,"author":{"gitId":"lohtianwei"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person), DEFAULT_LOCK_STATE);"},{"lineNumber":113,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":118,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, DEFAULT_LOCK_STATE) instanceof ExitCommand);"},{"lineNumber":119,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", DEFAULT_LOCK_STATE) instanceof ExitCommand);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parseCommand_remark() throws Exception {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        final Remark remark \u003d new Remark(\"foobar\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \""},{"lineNumber":126,"author":{"gitId":"lohtianwei"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + remark, DEFAULT_LOCK_STATE);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void parseCommand_remarkAlias() throws Exception {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        final Remark remark \u003d new Remark(\"foobar\");"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_ALIAS + \" \""},{"lineNumber":134,"author":{"gitId":"lohtianwei"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + remark, DEFAULT_LOCK_STATE);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":142,"author":{"gitId":"lohtianwei"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream()"},{"lineNumber":143,"author":{"gitId":"lohtianwei"},"content":"                        .collect(Collectors.joining(\" \")), DEFAULT_LOCK_STATE);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":148,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":149,"author":{"gitId":"lohtianwei"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":150,"author":{"gitId":"lohtianwei"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":151,"author":{"gitId":"lohtianwei"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream()"},{"lineNumber":152,"author":{"gitId":"lohtianwei"},"content":"                        .collect(Collectors.joining(\" \")), DEFAULT_LOCK_STATE);"},{"lineNumber":153,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":154,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":158,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, DEFAULT_LOCK_STATE) instanceof HelpCommand);"},{"lineNumber":159,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\","},{"lineNumber":160,"author":{"gitId":"lohtianwei"},"content":"                DEFAULT_LOCK_STATE) instanceof HelpCommand);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":165,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD, DEFAULT_LOCK_STATE) instanceof HistoryCommand);"},{"lineNumber":166,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\","},{"lineNumber":167,"author":{"gitId":"lohtianwei"},"content":"                DEFAULT_LOCK_STATE) instanceof HistoryCommand);"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":170,"author":{"gitId":"lohtianwei"},"content":"            parser.parseCommand(\"histories\", DEFAULT_LOCK_STATE);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":178,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":179,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS, DEFAULT_LOCK_STATE) instanceof HistoryCommand);"},{"lineNumber":180,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\","},{"lineNumber":181,"author":{"gitId":"lohtianwei"},"content":"                DEFAULT_LOCK_STATE) instanceof HistoryCommand);"},{"lineNumber":182,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseCommand_create() throws Exception {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Team team \u003d new Team(new TeamName(VALID_TEAM_ARSENAL));"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        CreateCommand command \u003d (CreateCommand) parser.parseCommand(CreateCommand.COMMAND_WORD + \" \""},{"lineNumber":188,"author":{"gitId":"lohtianwei"},"content":"            + VALID_TEAM_ARSENAL, DEFAULT_LOCK_STATE);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertEquals(new CreateCommand(team), command);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void parseCommand_createAlias() throws Exception {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        Team team \u003d new Team(new TeamName(VALID_TEAM_ARSENAL));"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        CreateCommand command \u003d (CreateCommand) parser.parseCommand(CreateCommand.COMMAND_ALIAS + \" \""},{"lineNumber":196,"author":{"gitId":"lohtianwei"},"content":"                + VALID_TEAM_ARSENAL, DEFAULT_LOCK_STATE);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        assertEquals(new CreateCommand(team), command);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":202,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, DEFAULT_LOCK_STATE) instanceof ListCommand);"},{"lineNumber":203,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\","},{"lineNumber":204,"author":{"gitId":"lohtianwei"},"content":"                DEFAULT_LOCK_STATE) instanceof ListCommand);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":208,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":209,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS, DEFAULT_LOCK_STATE) instanceof ListCommand);"},{"lineNumber":210,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\","},{"lineNumber":211,"author":{"gitId":"lohtianwei"},"content":"                DEFAULT_LOCK_STATE) instanceof ListCommand);"},{"lineNumber":212,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":217,"author":{"gitId":"lohtianwei"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(), DEFAULT_LOCK_STATE);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":222,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":223,"author":{"gitId":"lohtianwei"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":224,"author":{"gitId":"lohtianwei"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased(), DEFAULT_LOCK_STATE);"},{"lineNumber":225,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":226,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":230,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD, DEFAULT_LOCK_STATE) instanceof RedoCommand);"},{"lineNumber":231,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(\"redo 1\", DEFAULT_LOCK_STATE) instanceof RedoCommand);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":235,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":236,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS, DEFAULT_LOCK_STATE) instanceof RedoCommand);"},{"lineNumber":237,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\","},{"lineNumber":238,"author":{"gitId":"lohtianwei"},"content":"                DEFAULT_LOCK_STATE) instanceof RedoCommand);"},{"lineNumber":239,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":243,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD, DEFAULT_LOCK_STATE) instanceof UndoCommand);"},{"lineNumber":244,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(\"undo 3\", DEFAULT_LOCK_STATE) instanceof UndoCommand);"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":248,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":249,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS, DEFAULT_LOCK_STATE) instanceof UndoCommand);"},{"lineNumber":250,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\","},{"lineNumber":251,"author":{"gitId":"lohtianwei"},"content":"                DEFAULT_LOCK_STATE) instanceof UndoCommand);"},{"lineNumber":252,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":258,"author":{"gitId":"lohtianwei"},"content":"        parser.parseCommand(\"\", DEFAULT_LOCK_STATE);"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":265,"author":{"gitId":"lohtianwei"},"content":"        parser.parseCommand(\"unknownCommand\", DEFAULT_LOCK_STATE);"},{"lineNumber":266,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":268,"author":{"gitId":"lohtianwei"},"content":"    /** @lohtianwei */"},{"lineNumber":269,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":270,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_sort() throws Exception {"},{"lineNumber":271,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" \""},{"lineNumber":272,"author":{"gitId":"lohtianwei"},"content":"                + SortCommandParser.ACCEPTED_FIELDS.get(0) + \" \""},{"lineNumber":273,"author":{"gitId":"lohtianwei"},"content":"                + SortCommandParser.ACCEPTED_ORDERS.get(0), DEFAULT_LOCK_STATE) instanceof SortCommand);"},{"lineNumber":274,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":276,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":277,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_sortAlias() throws Exception {"},{"lineNumber":278,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_ALIAS + \" \""},{"lineNumber":279,"author":{"gitId":"lohtianwei"},"content":"                + SortCommandParser.ACCEPTED_FIELDS.get(0) + \" \""},{"lineNumber":280,"author":{"gitId":"lohtianwei"},"content":"                + SortCommandParser.ACCEPTED_ORDERS.get(0), DEFAULT_LOCK_STATE) instanceof SortCommand);"},{"lineNumber":281,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":282,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":283,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":284,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_key() throws Exception {"},{"lineNumber":285,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(KeyCommand.COMMAND_WORD"},{"lineNumber":286,"author":{"gitId":"lohtianwei"},"content":"                + \" ilikesports\", DEFAULT_LOCK_STATE) instanceof KeyCommand);"},{"lineNumber":287,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":289,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":290,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_keyAlias() throws Exception {"},{"lineNumber":291,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(KeyCommand.COMMAND_WORD"},{"lineNumber":292,"author":{"gitId":"lohtianwei"},"content":"                + \" ilikesports\", DEFAULT_LOCK_STATE) instanceof KeyCommand);"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":295,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":296,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_togglePrivacy() throws Exception {"},{"lineNumber":297,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(TogglePrivacyCommand.COMMAND_WORD + \" \""},{"lineNumber":298,"author":{"gitId":"lohtianwei"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":299,"author":{"gitId":"lohtianwei"},"content":"                + PREFIX_PHONE, DEFAULT_LOCK_STATE) instanceof TogglePrivacyCommand);"},{"lineNumber":300,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":302,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":303,"author":{"gitId":"lohtianwei"},"content":"    public void parseCommand_togglePrivacyAlias() throws Exception {"},{"lineNumber":304,"author":{"gitId":"lohtianwei"},"content":"        assertTrue(parser.parseCommand(TogglePrivacyCommand.COMMAND_ALIAS + \" \""},{"lineNumber":305,"author":{"gitId":"lohtianwei"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":306,"author":{"gitId":"lohtianwei"},"content":"                + PREFIX_PHONE, DEFAULT_LOCK_STATE) instanceof TogglePrivacyCommand);"},{"lineNumber":307,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":308,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":309,"author":{"gitId":"codeeong"},"content":"    /** @@Codee */"},{"lineNumber":310,"author":{"gitId":"codeeong"},"content":"    @Test"},{"lineNumber":311,"author":{"gitId":"codeeong"},"content":"    public void parseCommand_theme() throws Exception {"},{"lineNumber":312,"author":{"gitId":"codeeong"},"content":"        String[] listThemes \u003d { \"Light\", \"Dark\" };"},{"lineNumber":313,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":314,"author":{"gitId":"codeeong"},"content":"        for (int i \u003d 0; i \u003c 2; i++) {"},{"lineNumber":315,"author":{"gitId":"codeeong"},"content":"            ChangeThemeCommand command \u003d (ChangeThemeCommand) parser.parseCommand("},{"lineNumber":316,"author":{"gitId":"lohtianwei"},"content":"                    ChangeThemeCommand.COMMAND_WORD + \" \" + listThemes[i], DEFAULT_LOCK_STATE);"},{"lineNumber":317,"author":{"gitId":"codeeong"},"content":"            assertEquals(new ChangeThemeCommand(listThemes[i]), command);"},{"lineNumber":318,"author":{"gitId":"codeeong"},"content":"        }"},{"lineNumber":319,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":321,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lohtianwei":150,"codeeong":12,"-":159}},{"path":"src/test/java/seedu/address/logic/parser/ChangeThemeCommandParserTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ChangeThemeCommandParserTest {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private ChangeThemeCommandParser parser \u003d new ChangeThemeCommandParser();"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private String[] listThemes \u003d { \"Light\", \"Dark\" };"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsThemeCommand() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 2; i++) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertParseSuccess(parser, listThemes[i], new ChangeThemeCommand(listThemes[i]));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // Empty Argument"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\","},{"lineNumber":28,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":10,"-":20}},{"path":"src/test/java/seedu/address/logic/parser/SetCommandParserTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_COLOUR;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import static seedu.address.testutil.TypicalTags.FRIEND;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":"import seedu.address.logic.commands.SetCommand;"},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class SetCommandParserTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private SetCommandParser parser \u003d new SetCommandParser();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsSetCommand() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String userInput \u003d \" \" + PREFIX_TAG + FRIEND.getTagName() + \" \" + PREFIX_TAG_COLOUR + \"green\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, new SetCommand(FRIEND, \"green\"));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":11,"-":12}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"lohtianwei"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"//@@author lohtianwei"},{"lineNumber":4,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"lohtianwei"},"content":"//import static seedu.address.logic.commands.SortCommand.BY_ASCENDING;"},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":"//import static seedu.address.logic.commands.SortCommand.BY_DESCENDING;"},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.commands.SortCommand.MESSAGE_USAGE;"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":"//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":10,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":11,"author":{"gitId":"lohtianwei"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":13,"author":{"gitId":"lohtianwei"},"content":"//import seedu.address.logic.commands.SortCommand;"},{"lineNumber":14,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":"public class SortCommandParserTest {"},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":17,"author":{"gitId":"lohtianwei"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":"    public void noArguments_throwsParseException() {"},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":24,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"lohtianwei"},"content":"    public void parse_invalidArguments_failure() {"},{"lineNumber":26,"author":{"gitId":"lohtianwei"},"content":"        //more than 1 field entered"},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":"        assertParseFailure(parser, \"name\" + \" \" + \"address\" + \" \" + \"asc\","},{"lineNumber":28,"author":{"gitId":"lohtianwei"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":30,"author":{"gitId":"lohtianwei"},"content":"        //invalid field entered"},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":"        assertParseFailure(parser, \"invalid\" + \"asc\","},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":34,"author":{"gitId":"lohtianwei"},"content":"        //invalid sort order entered"},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":"        assertParseFailure(parser, \"name\" + \" \" + \"invalid\","},{"lineNumber":36,"author":{"gitId":"lohtianwei"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":"        //no field entered"},{"lineNumber":39,"author":{"gitId":"lohtianwei"},"content":"        assertParseFailure(parser, \"asc\","},{"lineNumber":40,"author":{"gitId":"lohtianwei"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":"        //no order entered"},{"lineNumber":43,"author":{"gitId":"lohtianwei"},"content":"        assertParseFailure(parser, \"name\","},{"lineNumber":44,"author":{"gitId":"lohtianwei"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lohtianwei"},"content":"    /*"},{"lineNumber":47,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"lohtianwei"},"content":"    public void parse_validArguments_success() {"},{"lineNumber":49,"author":{"gitId":"lohtianwei"},"content":"        //valid input for sort by name in asc order"},{"lineNumber":50,"author":{"gitId":"lohtianwei"},"content":"        assertParseSuccess(parser, \"name\" + \" \" + BY_ASCENDING,"},{"lineNumber":51,"author":{"gitId":"lohtianwei"},"content":"                new SortCommand(\"name\", BY_ASCENDING));"},{"lineNumber":52,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"        //valid input for sort by name in desc order"},{"lineNumber":54,"author":{"gitId":"lohtianwei"},"content":"        assertParseSuccess(parser, \"name\" + \" \" + BY_DESCENDING,"},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":"                new SortCommand(\"name\", BY_DESCENDING));"},{"lineNumber":56,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":57,"author":{"gitId":"lohtianwei"},"content":"        //valid input for sort by address in asc order"},{"lineNumber":58,"author":{"gitId":"lohtianwei"},"content":"        assertParseSuccess(parser, \"address\" + \" \" + BY_ASCENDING,"},{"lineNumber":59,"author":{"gitId":"lohtianwei"},"content":"                new SortCommand(\"address\", BY_ASCENDING));"},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":61,"author":{"gitId":"lohtianwei"},"content":"        //valid input for sort by address in desc order"},{"lineNumber":62,"author":{"gitId":"lohtianwei"},"content":"        assertParseSuccess(parser, \"address\" + \" \" + BY_DESCENDING,"},{"lineNumber":63,"author":{"gitId":"lohtianwei"},"content":"                new SortCommand(\"address\", BY_DESCENDING));"},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":"        //valid input for sort by phone in asc order"},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":"        assertParseSuccess(parser, \"phone\" + \" \" + BY_ASCENDING,"},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":"                new SortCommand(\"phone\", BY_ASCENDING));"},{"lineNumber":68,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":69,"author":{"gitId":"lohtianwei"},"content":"        //valid input for sort by phone in desc order"},{"lineNumber":70,"author":{"gitId":"lohtianwei"},"content":"        assertParseSuccess(parser, \"phone\" + \" \" + BY_DESCENDING,"},{"lineNumber":71,"author":{"gitId":"lohtianwei"},"content":"                new SortCommand(\"phone\", BY_DESCENDING));"},{"lineNumber":72,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":73,"author":{"gitId":"lohtianwei"},"content":"        //valid input for sort by email in asc order"},{"lineNumber":74,"author":{"gitId":"lohtianwei"},"content":"        assertParseSuccess(parser, \"email\" + \" \" + BY_ASCENDING,"},{"lineNumber":75,"author":{"gitId":"lohtianwei"},"content":"                new SortCommand(\"email\", BY_ASCENDING));"},{"lineNumber":76,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":77,"author":{"gitId":"lohtianwei"},"content":"        //valid input for sort by email in desc order"},{"lineNumber":78,"author":{"gitId":"lohtianwei"},"content":"        assertParseSuccess(parser, \"email\" + \" \" + BY_DESCENDING,"},{"lineNumber":79,"author":{"gitId":"lohtianwei"},"content":"                new SortCommand(\"email\", BY_DESCENDING));"},{"lineNumber":80,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"lohtianwei"},"content":"    */"},{"lineNumber":82,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":82}},{"path":"src/test/java/seedu/address/logic/parser/TogglePrivacyCommandParserTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"lohtianwei"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"//@@author lohtianwei"},{"lineNumber":4,"author":{"gitId":"lohtianwei"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":11,"author":{"gitId":"lohtianwei"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":13,"author":{"gitId":"lohtianwei"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.TogglePrivacyCommand;"},{"lineNumber":17,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.TogglePrivacyCommand.EditPersonPrivacy;"},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.testutil.EditPersonPrivacyBuilder;"},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":"public class TogglePrivacyCommandParserTest {"},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":23,"author":{"gitId":"lohtianwei"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format"},{"lineNumber":24,"author":{"gitId":"lohtianwei"},"content":"            (MESSAGE_INVALID_COMMAND_FORMAT, TogglePrivacyCommand.MESSAGE_USAGE);"},{"lineNumber":25,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":26,"author":{"gitId":"lohtianwei"},"content":"    private static final String MESSAGE_NO_FIELDS \u003d String.format(TogglePrivacyCommand.MESSAGE_NO_FIELDS);"},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":28,"author":{"gitId":"lohtianwei"},"content":"    private TogglePrivacyCommandParser parser \u003d new TogglePrivacyCommandParser();"},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":30,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":"    public void parseInvalidIndex() {"},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":"        // zero index"},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":34,"author":{"gitId":"lohtianwei"},"content":"        //negative index"},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":36,"author":{"gitId":"lohtianwei"},"content":"        //invalid index"},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":"        assertParseFailure(parser, \"1 random\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":40,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"lohtianwei"},"content":"    public void parseMissingField_fail() {"},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":"        // no prefix specified"},{"lineNumber":43,"author":{"gitId":"lohtianwei"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_NO_FIELDS);"},{"lineNumber":44,"author":{"gitId":"lohtianwei"},"content":"        //no index specified"},{"lineNumber":45,"author":{"gitId":"lohtianwei"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":46,"author":{"gitId":"lohtianwei"},"content":"        //nothing specified after command word"},{"lineNumber":47,"author":{"gitId":"lohtianwei"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":48,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":50,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"lohtianwei"},"content":"    public void parseInvalidPrefix_fail() {"},{"lineNumber":52,"author":{"gitId":"lohtianwei"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_NAME,"},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TogglePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":56,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"lohtianwei"},"content":"    public void parseOneField_success() throws ParseException {"},{"lineNumber":58,"author":{"gitId":"lohtianwei"},"content":"        Index target \u003d INDEX_FIRST_PERSON;"},{"lineNumber":59,"author":{"gitId":"lohtianwei"},"content":"        String input \u003d target.getOneBased() + \" \" + PREFIX_PHONE;"},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":61,"author":{"gitId":"lohtianwei"},"content":"        EditPersonPrivacy epp \u003d new EditPersonPrivacyBuilder().setPhonePrivate(\"false\").build();"},{"lineNumber":62,"author":{"gitId":"lohtianwei"},"content":"        TogglePrivacyCommand expected \u003d new TogglePrivacyCommand(target, epp);"},{"lineNumber":63,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":"        TogglePrivacyCommand actual \u003d parser.parse(input);"},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":"        compareTpCommand(expected, actual);"},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":69,"author":{"gitId":"lohtianwei"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"lohtianwei"},"content":"    public void parseValidFollowedbyInvalid_success() throws ParseException {"},{"lineNumber":71,"author":{"gitId":"lohtianwei"},"content":"        Index target \u003d INDEX_FIRST_PERSON;"},{"lineNumber":72,"author":{"gitId":"lohtianwei"},"content":"        String input \u003d target.getOneBased() + \" \" + PREFIX_PHONE + \" \" + PREFIX_NAME;"},{"lineNumber":73,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":74,"author":{"gitId":"lohtianwei"},"content":"        EditPersonPrivacy epp \u003d new EditPersonPrivacyBuilder().setPhonePrivate(\"false\").build();"},{"lineNumber":75,"author":{"gitId":"lohtianwei"},"content":"        TogglePrivacyCommand expected \u003d new TogglePrivacyCommand(target, epp);"},{"lineNumber":76,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":77,"author":{"gitId":"lohtianwei"},"content":"        TogglePrivacyCommand actual \u003d parser.parse(input);"},{"lineNumber":78,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":79,"author":{"gitId":"lohtianwei"},"content":"        compareTpCommand(expected, actual);"},{"lineNumber":80,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":82,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"lohtianwei"},"content":"     * Checks if two TP commands are equal"},{"lineNumber":84,"author":{"gitId":"lohtianwei"},"content":"     * @param expected"},{"lineNumber":85,"author":{"gitId":"lohtianwei"},"content":"     * @param actual"},{"lineNumber":86,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"lohtianwei"},"content":"    private void compareTpCommand(TogglePrivacyCommand expected, TogglePrivacyCommand actual) {"},{"lineNumber":88,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(expected.getIndex(), actual.getIndex());"},{"lineNumber":89,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(expected.getEpp().getPrivateRemark(), actual.getEpp().getPrivateRemark());"},{"lineNumber":90,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(expected.getEpp().getPrivateAddress(), actual.getEpp().getPrivateAddress());"},{"lineNumber":91,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(expected.getEpp().getPrivateRating(), actual.getEpp().getPrivateRating());"},{"lineNumber":92,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(expected.getEpp().getPrivatePhone(), actual.getEpp().getPrivatePhone());"},{"lineNumber":93,"author":{"gitId":"lohtianwei"},"content":"        assertEquals(expected.getEpp().getPrivateEmail(), actual.getEpp().getPrivateEmail());"},{"lineNumber":94,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":95}},{"path":"src/test/java/seedu/address/model/tag/TagTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"codeeong"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"codeeong"},"content":"    public void constructor_invalidTagColourName_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitId":"codeeong"},"content":"        String invalidTagColourName \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"codeeong"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagColourName));"},{"lineNumber":24,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void isValidTagName() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // null tag name"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"codeeong"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"codeeong"},"content":"    public void isValidTagColour() {"},{"lineNumber":34,"author":{"gitId":"codeeong"},"content":"        // null tag name"},{"lineNumber":35,"author":{"gitId":"codeeong"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagColour(null));"},{"lineNumber":36,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":12,"-":26}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/JsonUserPrefsStorageTest/\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        readUserPrefs(null);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":51,"author":{"gitId":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":52,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private String addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER + userPrefsFileInTestDataFolder"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(1000, 500, 300, 100);"},{"lineNumber":85,"author":{"gitId":"codeeong"},"content":"        userPrefs.setAddressBookFilePath(\"myteammanager.xml\");"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookName(\"TypicalAddressBookName\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        saveUserPrefs(null, \"SomeFile.json\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        saveUserPrefs(new UserPrefs(), null);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        original.setGuiSettings(1200, 200, 0, 2);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String pefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        original.setGuiSettings(5, 5, 5, 5);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":1,"-":134}},{"path":"src/test/java/seedu/address/testutil/EditPersonPrivacyBuilder.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lohtianwei"},"content":"//@@author lohtianwei"},{"lineNumber":4,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.logic.commands.TogglePrivacyCommand.EditPersonPrivacy;"},{"lineNumber":5,"author":{"gitId":"lohtianwei"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":7,"author":{"gitId":"lohtianwei"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"lohtianwei"},"content":" * A utility class to help with building EditPersonPrivacy objects."},{"lineNumber":9,"author":{"gitId":"lohtianwei"},"content":" */"},{"lineNumber":10,"author":{"gitId":"lohtianwei"},"content":"public class EditPersonPrivacyBuilder {"},{"lineNumber":11,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":12,"author":{"gitId":"lohtianwei"},"content":"    private EditPersonPrivacy epp;"},{"lineNumber":13,"author":{"gitId":"lohtianwei"},"content":"    public EditPersonPrivacyBuilder() {"},{"lineNumber":14,"author":{"gitId":"lohtianwei"},"content":"        epp \u003d new EditPersonPrivacy();"},{"lineNumber":15,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":17,"author":{"gitId":"lohtianwei"},"content":"    public EditPersonPrivacyBuilder(EditPersonPrivacy epp) {"},{"lineNumber":18,"author":{"gitId":"lohtianwei"},"content":"        this.epp \u003d new EditPersonPrivacy(epp);"},{"lineNumber":19,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":21,"author":{"gitId":"lohtianwei"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":"     * Returns an {@code EditPersonPrivacy} with fields containing {@code person}\u0027s privacy details"},{"lineNumber":23,"author":{"gitId":"lohtianwei"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"lohtianwei"},"content":"    public EditPersonPrivacyBuilder(Person p) {"},{"lineNumber":25,"author":{"gitId":"lohtianwei"},"content":"        epp \u003d new EditPersonPrivacy();"},{"lineNumber":26,"author":{"gitId":"lohtianwei"},"content":"        epp.setPrivateAddress(p.getAddress().isPrivate());"},{"lineNumber":27,"author":{"gitId":"lohtianwei"},"content":"        epp.setPrivateEmail(p.getEmail().isPrivate());"},{"lineNumber":28,"author":{"gitId":"lohtianwei"},"content":"        epp.setPrivatePhone(p.getPhone().isPrivate());"},{"lineNumber":29,"author":{"gitId":"lohtianwei"},"content":"        epp.setPrivateRemark(p.getRemark().isPrivate());"},{"lineNumber":30,"author":{"gitId":"lohtianwei"},"content":"        epp.setPrivateRating(p.getRating().isPrivate());"},{"lineNumber":31,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":33,"author":{"gitId":"lohtianwei"},"content":"    public EditPersonPrivacyBuilder setPhonePrivate(String phone) {"},{"lineNumber":34,"author":{"gitId":"lohtianwei"},"content":"        if (phone.equals(\"Optional[true]\") || phone.equals(\"true\")) {"},{"lineNumber":35,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivatePhone(true);"},{"lineNumber":36,"author":{"gitId":"lohtianwei"},"content":"        } else if (phone.equals(\"Optional[false]\") || phone.equals(\"false\")) {"},{"lineNumber":37,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivatePhone(false);"},{"lineNumber":38,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"lohtianwei"},"content":"            throw new IllegalArgumentException(\"Privacy of phone should be true or false\");"},{"lineNumber":40,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"lohtianwei"},"content":"        return this;"},{"lineNumber":42,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":44,"author":{"gitId":"lohtianwei"},"content":"    public EditPersonPrivacyBuilder setEmailPrivate(String email) {"},{"lineNumber":45,"author":{"gitId":"lohtianwei"},"content":"        if (email.equals(\"Optional[true]\") || email.equals(\"true\")) {"},{"lineNumber":46,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivateEmail(true);"},{"lineNumber":47,"author":{"gitId":"lohtianwei"},"content":"        } else if (email.equals(\"Optional[false]\") || email.equals(\"false\")) {"},{"lineNumber":48,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivateEmail(false);"},{"lineNumber":49,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"lohtianwei"},"content":"            throw new IllegalArgumentException(\"Privacy of email should be true or false\");"},{"lineNumber":51,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"lohtianwei"},"content":"        return this;"},{"lineNumber":53,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":55,"author":{"gitId":"lohtianwei"},"content":"    public EditPersonPrivacyBuilder setAddressPrivate(String address) {"},{"lineNumber":56,"author":{"gitId":"lohtianwei"},"content":"        if (address.equals(\"Optional[true]\") || address.equals(\"true\")) {"},{"lineNumber":57,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivateAddress(true);"},{"lineNumber":58,"author":{"gitId":"lohtianwei"},"content":"        } else if (address.equals(\"Optional[false]\") || address.equals(\"false\")) {"},{"lineNumber":59,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivateAddress(false);"},{"lineNumber":60,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":61,"author":{"gitId":"lohtianwei"},"content":"            throw new IllegalArgumentException(\"Privacy of address should be true or false\");"},{"lineNumber":62,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"lohtianwei"},"content":"        return this;"},{"lineNumber":64,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":66,"author":{"gitId":"lohtianwei"},"content":"    public EditPersonPrivacyBuilder setRatingPrivate(String rating) {"},{"lineNumber":67,"author":{"gitId":"lohtianwei"},"content":"        if (rating.equals(\"Optional[true]\") || rating.equals(\"true\")) {"},{"lineNumber":68,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivateRating(true);"},{"lineNumber":69,"author":{"gitId":"lohtianwei"},"content":"        } else if (rating.equals(\"Optional[false]\") || rating.equals(\"false\")) {"},{"lineNumber":70,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivateRating(false);"},{"lineNumber":71,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":72,"author":{"gitId":"lohtianwei"},"content":"            throw new IllegalArgumentException(\"Privacy of rating should be true or false\");"},{"lineNumber":73,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"lohtianwei"},"content":"        return this;"},{"lineNumber":75,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":77,"author":{"gitId":"lohtianwei"},"content":"    public EditPersonPrivacyBuilder setRemarkPrivate(String remark) {"},{"lineNumber":78,"author":{"gitId":"lohtianwei"},"content":"        if (remark.equals(\"Optional[true]\") || remark.equals(\"true\")) {"},{"lineNumber":79,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivateRemark(true);"},{"lineNumber":80,"author":{"gitId":"lohtianwei"},"content":"        } else if (remark.equals(\"Optional[false]\") || remark.equals(\"false\")) {"},{"lineNumber":81,"author":{"gitId":"lohtianwei"},"content":"            epp.setPrivateRemark(false);"},{"lineNumber":82,"author":{"gitId":"lohtianwei"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"lohtianwei"},"content":"            throw new IllegalArgumentException(\"Privacy of remark should be true or false\");"},{"lineNumber":84,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"lohtianwei"},"content":"        return this;"},{"lineNumber":86,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":88,"author":{"gitId":"lohtianwei"},"content":"    public EditPersonPrivacy build() {"},{"lineNumber":89,"author":{"gitId":"lohtianwei"},"content":"        return epp;"},{"lineNumber":90,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":89,"-":2}},{"path":"src/test/java/seedu/address/testutil/TeamBuilder.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":" * A utility class to help with building a TeamList."},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"//@@author Codee"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TeamBuilder {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_TEAM_NAME \u003d \"Arsenal\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private TeamName teamName;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public TeamBuilder() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        teamName \u003d new TeamName(DEFAULT_TEAM_NAME);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Initializes the TeamBuilder with the data of {@code teamToCopy}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public TeamBuilder(Team teamToCopy) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        teamName \u003d teamToCopy.getTeamName();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Sets the {@code TeamName} of the {@code Team} that we are building."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public TeamBuilder withTeamName(String teamName) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.teamName \u003d new TeamName(teamName);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public Team build() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return new Team(teamName);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":8,"-":31}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_JERSEY_NUMBER_17;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_JERSEY_NUMBER_2;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POSITION_MIDFIELD;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POSITION_STRIKER;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_0;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_1;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":22,"author":{"gitId":"lohtianwei"},"content":"import java.util.Collections;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .withPhone(\"85355255\").withTags(\"friends\").withRating(\"0\")"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withPosition(\"1\").withJerseyNumber(\"1\").build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").withRating(\"1\")"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            .withPosition(\"2\").withJerseyNumber(\"2\").build();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withRating(\"2\")"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            .withPosition(\"3\").withJerseyNumber(\"3\").build();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withRating(\"3\")"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            .withPosition(\"4\").withJerseyNumber(\"4\").build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withRating(\"4\")"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            .withPosition(\"1\").withJerseyNumber(\"5\").build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withRating(\"5\")"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            .withPosition(\"2\").withJerseyNumber(\"6\").build();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withRemark(\"Could be famous\").withRating(\"0\")"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            .withPosition(\"3\").withJerseyNumber(\"7\").build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRating(VALID_RATING_0)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRating(VALID_RATING_1)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            .withPosition(VALID_POSITION_MIDFIELD).withJerseyNumber(VALID_JERSEY_NUMBER_17)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"lohtianwei"},"content":"    //@@author lohtianwei"},{"lineNumber":94,"author":{"gitId":"lohtianwei"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":95,"author":{"gitId":"lohtianwei"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":96,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":98,"author":{"gitId":"lohtianwei"},"content":"    public static List\u003cPerson\u003e getTypicalPersonsSortedByAddress() {"},{"lineNumber":99,"author":{"gitId":"lohtianwei"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(DANIEL, ALICE, BENSON, GEORGE, FIONA, ELLE, CARL));"},{"lineNumber":100,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":102,"author":{"gitId":"lohtianwei"},"content":"    public static List\u003cPerson\u003e getTypicalPersonsSortedByEmail() {"},{"lineNumber":103,"author":{"gitId":"lohtianwei"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, GEORGE, DANIEL, CARL, BENSON, FIONA, ELLE));"},{"lineNumber":104,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":106,"author":{"gitId":"lohtianwei"},"content":"    public static List\u003cPerson\u003e getTypicalPersonsSortedByPhone() {"},{"lineNumber":107,"author":{"gitId":"lohtianwei"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, DANIEL, ELLE, FIONA, GEORGE, CARL, BENSON));"},{"lineNumber":108,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":110,"author":{"gitId":"lohtianwei"},"content":"    public static AddressBook getSortedAddressBook(String field, String order) {"},{"lineNumber":111,"author":{"gitId":"lohtianwei"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":112,"author":{"gitId":"lohtianwei"},"content":"        List\u003cPerson\u003e personList;"},{"lineNumber":113,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":114,"author":{"gitId":"lohtianwei"},"content":"        switch(field) {"},{"lineNumber":115,"author":{"gitId":"lohtianwei"},"content":"        case \"name\":"},{"lineNumber":116,"author":{"gitId":"lohtianwei"},"content":"            personList \u003d getTypicalPersons();"},{"lineNumber":117,"author":{"gitId":"lohtianwei"},"content":"            break;"},{"lineNumber":118,"author":{"gitId":"lohtianwei"},"content":"        case \"phone\":"},{"lineNumber":119,"author":{"gitId":"lohtianwei"},"content":"            personList \u003d getTypicalPersonsSortedByPhone();"},{"lineNumber":120,"author":{"gitId":"lohtianwei"},"content":"            break;"},{"lineNumber":121,"author":{"gitId":"lohtianwei"},"content":"        case \"email\":"},{"lineNumber":122,"author":{"gitId":"lohtianwei"},"content":"            personList \u003d getTypicalPersonsSortedByEmail();"},{"lineNumber":123,"author":{"gitId":"lohtianwei"},"content":"            break;"},{"lineNumber":124,"author":{"gitId":"lohtianwei"},"content":"        case \"address\":"},{"lineNumber":125,"author":{"gitId":"lohtianwei"},"content":"            personList \u003d getTypicalPersonsSortedByAddress();"},{"lineNumber":126,"author":{"gitId":"lohtianwei"},"content":"            break;"},{"lineNumber":127,"author":{"gitId":"lohtianwei"},"content":"        default:"},{"lineNumber":128,"author":{"gitId":"lohtianwei"},"content":"            personList \u003d getTypicalPersons();"},{"lineNumber":129,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":131,"author":{"gitId":"lohtianwei"},"content":"        if (order.equals(\"desc\")) {"},{"lineNumber":132,"author":{"gitId":"lohtianwei"},"content":"            Collections.reverse(personList);"},{"lineNumber":133,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":135,"author":{"gitId":"lohtianwei"},"content":"        for (Person person : personList) {"},{"lineNumber":136,"author":{"gitId":"lohtianwei"},"content":"            try {"},{"lineNumber":137,"author":{"gitId":"lohtianwei"},"content":"                ab.addPerson(person);"},{"lineNumber":138,"author":{"gitId":"lohtianwei"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":139,"author":{"gitId":"lohtianwei"},"content":"                assert false : \"not possible\";"},{"lineNumber":140,"author":{"gitId":"lohtianwei"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"lohtianwei"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":143,"author":{"gitId":"lohtianwei"},"content":"        return ab;"},{"lineNumber":144,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"lohtianwei"},"content":""},{"lineNumber":146,"author":{"gitId":"lohtianwei"},"content":"    public static AddressBook getEmptyAddressBook() {"},{"lineNumber":147,"author":{"gitId":"lohtianwei"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":148,"author":{"gitId":"lohtianwei"},"content":"        return ab;"},{"lineNumber":149,"author":{"gitId":"lohtianwei"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"lohtianwei"},"content":"}"}],"authorContributionMap":{"lohtianwei":59,"-":91}},{"path":"src/test/java/seedu/address/testutil/TypicalTags.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"codeeong"},"content":" * A utility class containing a list of {@code Tag} objects to be used in tests."},{"lineNumber":14,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class TypicalTags {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final Tag GOOD_ATTITUDE \u003d new Tag(\"goodAttitude\", \"teal\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final Tag FRIEND \u003d new Tag(\"friends\", \"teal\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private TypicalTags() {} //prevents instantiation"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical teams."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        for (Tag tag : getTypicalTags()) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                ab.addTag(tag);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            } catch (UniqueTagList.DuplicateTagException e) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static List\u003cTag\u003e getTypicalTags() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GOOD_ATTITUDE, FRIEND));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":14,"-":29}},{"path":"src/test/java/seedu/address/ui/PlayerDetailsTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertPlayerDetailsDisplaysPerson;"},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":"import guitests.guihandles.PlayerDetailsHandle;"},{"lineNumber":10,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"//@@author Codee"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PlayerDetailsTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void display() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // no tags"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        PlayerDetails playerDetails \u003d new PlayerDetails(personWithNoTags);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        uiPartRule.setUiPart(playerDetails);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertCardDisplay(playerDetails, personWithNoTags);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        PlayerDetails playerDetails \u003d new PlayerDetails(person);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(playerDetails.equals(playerDetails));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(playerDetails.equals(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(playerDetails.equals(0));"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(playerDetails.equals(new PlayerDetails(differentPerson)));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Asserts that {@code playerDetails} displays the details of {@code expectedPerson} correctly"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private void assertCardDisplay(PlayerDetails playerDetails, Person expectedPerson) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        PlayerDetailsHandle playerDetailsHandle \u003d new PlayerDetailsHandle(playerDetails.getRoot());"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // verify player details are displayed correctly"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertPlayerDetailsDisplaysPerson(expectedPerson, playerDetailsHandle);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":13,"-":44}},{"path":"src/test/java/seedu/address/ui/TeamDisplayTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"codeeong"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":3,"author":{"gitId":"codeeong"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertTeamDisplayEquals;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitId":"codeeong"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":9,"author":{"gitId":"codeeong"},"content":"import guitests.guihandles.TeamDisplayHandle;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitId":"codeeong"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":"import seedu.address.commons.events.ui.ShowNewTeamNameEvent;"},{"lineNumber":13,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":14,"author":{"gitId":"codeeong"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":15,"author":{"gitId":"codeeong"},"content":"import seedu.address.testutil.TeamBuilder;"},{"lineNumber":16,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":17,"author":{"gitId":"codeeong"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"codeeong"},"content":" * tests for TeamDisplay UI Component."},{"lineNumber":19,"author":{"gitId":"codeeong"},"content":" */"},{"lineNumber":20,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/** @@author Codee */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class TeamDisplayTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NEW_TEAM_NAME \u003d \"myTeam\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final ShowNewTeamNameEvent SHOW_NEW_TEAM_NAME_EVENT \u003d new ShowNewTeamNameEvent(NEW_TEAM_NAME);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private TeamDisplay teamDisplay;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private TeamDisplayHandle teamDisplayHandle;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private ObservableList\u003cTeam\u003e teamList;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        teamList \u003d FXCollections.observableArrayList();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        teamList.add(new TeamBuilder().withTeamName(\"Arsenal\").build());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        teamList.add(new TeamBuilder().withTeamName(\"Chelsea\").build());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        teamDisplay \u003d new TeamDisplay(teamList);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        uiPartRule.setUiPart(teamDisplay);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        teamDisplayHandle \u003d new TeamDisplayHandle(teamDisplay.getRoot());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void display() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertTeamDisplay(teamDisplay, teamList);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * {@code expectedId}."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private void assertTeamDisplay(TeamDisplay teamDisplay, ObservableList\u003cTeam\u003e teamlist) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // verify team names are displayed correctly"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTeamDisplayEquals(teamDisplay, teamDisplayHandle);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void handleShowNewTeamNameEvent() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        postNow(SHOW_NEW_TEAM_NAME_EVENT);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // verify team names are displayed correctly after event"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        teamList.add(new Team(new TeamName(NEW_TEAM_NAME)));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        TeamDisplay expectedTeamDisplay \u003d new TeamDisplay(teamList);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        teamDisplayHandle \u003d new TeamDisplayHandle(teamDisplay.getRoot());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // verify team names are displayed correctly"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTeamDisplayEquals(expectedTeamDisplay, teamDisplayHandle);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":19,"-":50}},{"path":"src/test/java/seedu/address/ui/UiPartTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class UiPartTest {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return testFileUrl;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * UiPart used for testing."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        @FXML"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            super(fxmlFileName);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"}"},{"lineNumber":119,"author":{"gitId":"codeeong"},"content":""}],"authorContributionMap":{"codeeong":1,"-":118}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"codeeong"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"codeeong"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitId":"codeeong"},"content":"import guitests.guihandles.PlayerDetailsHandle;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":14,"author":{"gitId":"codeeong"},"content":"import guitests.guihandles.TeamDisplayHandle;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"codeeong"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":17,"author":{"gitId":"codeeong"},"content":"import seedu.address.ui.TeamDisplay;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":23,"author":{"gitId":"codeeong"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":24,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":30,"author":{"gitId":"codeeong"},"content":"        assertEquals(expectedCard.getPosition(), actualCard.getPosition());"},{"lineNumber":31,"author":{"gitId":"codeeong"},"content":"        assertEquals(expectedCard.getRating(), actualCard.getRating());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":33,"author":{"gitId":"codeeong"},"content":"        assertEquals(expectedCard.getTeamName(), actualCard.getTeamName());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":35,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":36,"author":{"gitId":"codeeong"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":37,"author":{"gitId":"codeeong"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"codeeong"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"codeeong"},"content":"     * Asserts that {@code actualTeamDisplay} displays the details of {@code expectedTeamDisplay}."},{"lineNumber":42,"author":{"gitId":"codeeong"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    //@@author Codee"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static void assertTeamDisplayEquals(TeamDisplay expectedTeamDisplay, TeamDisplayHandle actualTeamDisplay) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        expectedTeamDisplay.getTeams().forEach(team -\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                assertEquals(expectedTeamDisplay.getTeams().toString(), actualTeamDisplay.getTeams().toString()));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":49,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":55,"author":{"gitId":"codeeong"},"content":"        assertEquals(expectedPerson.getTeamName().toString(), actualCard.getTeamName());"},{"lineNumber":56,"author":{"gitId":"codeeong"},"content":"        assertEquals(expectedPerson.getRating().value, actualCard.getRating());"},{"lineNumber":57,"author":{"gitId":"codeeong"},"content":"        assertEquals(expectedPerson.getPosition().getPositionName(), actualCard.getPosition());"},{"lineNumber":58,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":59,"author":{"gitId":"codeeong"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":60,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":62,"author":{"gitId":"codeeong"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"codeeong"},"content":"     * Asserts that {@code actualPlayerDetails} displays the details of {@code expectedPerson}."},{"lineNumber":64,"author":{"gitId":"codeeong"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    //@@author Codee"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static void assertPlayerDetailsDisplaysPerson(Person expectedPerson, PlayerDetailsHandle actualPlayerPanel) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualPlayerPanel.getName());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson.getAddress().toString(), actualPlayerPanel.getAddress());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualPlayerPanel.getEmail());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson.getJerseyNumber().value, actualPlayerPanel.getJerseyNumber());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualPlayerPanel.getPhone());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson.getRemark().toString(), actualPlayerPanel.getRemarks());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":75,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":76,"author":{"gitId":"codeeong"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"codeeong"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":78,"author":{"gitId":"codeeong"},"content":"     * of {@tagColour}"},{"lineNumber":79,"author":{"gitId":"codeeong"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"codeeong"},"content":"     * @see PersonCard getTagColorStyleFor(String)"},{"lineNumber":81,"author":{"gitId":"codeeong"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"codeeong"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":83,"author":{"gitId":"codeeong"},"content":"        switch (tagName) {"},{"lineNumber":84,"author":{"gitId":"codeeong"},"content":"        case \"classmates\":"},{"lineNumber":85,"author":{"gitId":"codeeong"},"content":"        case \"owesMoney\":"},{"lineNumber":86,"author":{"gitId":"codeeong"},"content":"        case \"colleagues\":"},{"lineNumber":87,"author":{"gitId":"codeeong"},"content":"        case \"neighbours\":"},{"lineNumber":88,"author":{"gitId":"codeeong"},"content":"        case \"family\":"},{"lineNumber":89,"author":{"gitId":"codeeong"},"content":"        case \"friend\":"},{"lineNumber":90,"author":{"gitId":"codeeong"},"content":"        case \"friends\":"},{"lineNumber":91,"author":{"gitId":"codeeong"},"content":"        case \"husband\":"},{"lineNumber":92,"author":{"gitId":"codeeong"},"content":"        case \"redCard\":"},{"lineNumber":93,"author":{"gitId":"codeeong"},"content":"        case \"yellowCard\":"},{"lineNumber":94,"author":{"gitId":"codeeong"},"content":"        case \"goodAttitude\":"},{"lineNumber":95,"author":{"gitId":"codeeong"},"content":"        case \"badAttitude\":"},{"lineNumber":96,"author":{"gitId":"codeeong"},"content":"        case \"injured\":"},{"lineNumber":97,"author":{"gitId":"codeeong"},"content":"        case \"fastRunner\":"},{"lineNumber":98,"author":{"gitId":"codeeong"},"content":"            return \"teal\";"},{"lineNumber":99,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":100,"author":{"gitId":"codeeong"},"content":"        default:"},{"lineNumber":101,"author":{"gitId":"codeeong"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":102,"author":{"gitId":"codeeong"},"content":"            return \"\";"},{"lineNumber":103,"author":{"gitId":"codeeong"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"codeeong"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":106,"author":{"gitId":"codeeong"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"codeeong"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":108,"author":{"gitId":"codeeong"},"content":"     * color."},{"lineNumber":109,"author":{"gitId":"codeeong"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"codeeong"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":111,"author":{"gitId":"codeeong"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":112,"author":{"gitId":"codeeong"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":113,"author":{"gitId":"codeeong"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":114,"author":{"gitId":"codeeong"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":115,"author":{"gitId":"codeeong"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":116,"author":{"gitId":"codeeong"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * in the correct order."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * in the correct order."},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":70,"-":81}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AVATAR_MAC_LINUX;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AVATAR_WINDOWS;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AVATAR_NO_FILE;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AVATAR_TYPE;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_JERSEY_NUMBER_DESC;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_POSITION_DESC;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":20,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.JERSEY_NUMBER_DESC_17;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.JERSEY_NUMBER_DESC_2;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":26,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POSITION_DESC_MIDFILED;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POSITION_DESC_STRIKER;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_0;"},{"lineNumber":29,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_1;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AVATAR_MAC_LINUX;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AVATAR_WINDOWS;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_JERSEY_NUMBER_17;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_JERSEY_NUMBER_2;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POSITION_STRIKER;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_0;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"import com.sun.javafx.PlatformUtil;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":90,"author":{"gitId":"-"},"content":"         * -\u003e added"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Avatar.setUpPlaceholderForTest();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).withRating(VALID_RATING_0)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND  + \" \" + RATING_DESC_0 + \"   \" + POSITION_DESC_STRIKER + \"   \""},{"lineNumber":115,"author":{"gitId":"-"},"content":"                + JERSEY_NUMBER_DESC_2;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).withRating(VALID_RATING_0)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":123,"author":{"gitId":"codeeong"},"content":"                + TAG_DESC_FRIEND + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).withRating(VALID_RATING_0)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND  + \" \" + RATING_DESC_0 + \"   \" + POSITION_DESC_STRIKER + \"   \""},{"lineNumber":132,"author":{"gitId":"-"},"content":"                + JERSEY_NUMBER_DESC_2;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).withRating(VALID_RATING_0)"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND  + \" \" + RATING_DESC_0 + \"   \" + POSITION_DESC_STRIKER + \"   \""},{"lineNumber":141,"author":{"gitId":"-"},"content":"                + JERSEY_NUMBER_DESC_2;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        deleteAllPersons();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":151,"author":{"gitId":"codeeong"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_17 + RATING_DESC_1;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        /* Case: missing phone -\u003e added */"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                .withPhone(UNSPECIFIED_FIELD).withTags().withRating(VALID_RATING_0)"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + RATING_DESC_0"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        /* Case: missing address -\u003e added */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                .withAddress(UNSPECIFIED_FIELD).withTags().withRating(VALID_RATING_0)"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RATING_DESC_0"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        /* Case: missing rating -\u003e added */"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags().withRating(UNSPECIFIED_FIELD)"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        if (PlatformUtil.isWindows()) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                    .withPhone(VALID_PHONE_AMY).withAddress(VALID_ADDRESS_AMY).withAvatar(VALID_AVATAR_WINDOWS)"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                    .withTags(VALID_TAG_FRIEND).withRating(VALID_RATING_0).withJerseyNumber(VALID_JERSEY_NUMBER_17)"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                            .build();"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + EMAIL_DESC_BOB + AVATAR_WINDOWS"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                    + PHONE_DESC_AMY + ADDRESS_DESC_AMY + RATING_DESC_0 + JERSEY_NUMBER_DESC_17 + POSITION_DESC_STRIKER"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                    + TAG_DESC_FRIEND;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            assertCommandSuccess(command, toAdd);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } else if (PlatformUtil.isMac() || PlatformUtil.isLinux()) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                    .withPhone(VALID_PHONE_AMY).withAddress(VALID_ADDRESS_AMY).withAvatar(VALID_AVATAR_MAC_LINUX)"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                    .withTags(VALID_TAG_FRIEND).withRating(VALID_RATING_0).withJerseyNumber(VALID_JERSEY_NUMBER_17)"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                    .build();"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + EMAIL_DESC_BOB + AVATAR_MAC_LINUX"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                    + PHONE_DESC_AMY + ADDRESS_DESC_AMY + RATING_DESC_0 + JERSEY_NUMBER_DESC_17 + POSITION_DESC_STRIKER"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                    + TAG_DESC_FRIEND;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            assertCommandSuccess(command, toAdd);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + RATING_DESC_0"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + RATING_DESC_0"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":247,"author":{"gitId":"-"},"content":"                + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":252,"author":{"gitId":"-"},"content":"                + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":257,"author":{"gitId":"-"},"content":"                + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":262,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"        //@@author lithiumlkid"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        /* Case: invalid rating -\u003e rejected */"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":268,"author":{"gitId":"-"},"content":"                 + INVALID_RATING_DESC + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"        /* Case: invalid position -\u003e rejected */"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":273,"author":{"gitId":"-"},"content":"                 + RATING_DESC_0 + INVALID_POSITION_DESC + JERSEY_NUMBER_DESC_2;"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Position.MESSAGE_POSITION_CONSTRAINTS);"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"        /* Case: invalid jersey number -\u003e rejected */"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":278,"author":{"gitId":"-"},"content":"                 + RATING_DESC_0 + POSITION_DESC_STRIKER + INVALID_JERSEY_NUMBER_DESC;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, JerseyNumber.MESSAGE_JERSEY_NUMBER_CONSTRAINTS);"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"        /* Case: invalid jersey avatar -\u003e rejected */"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":283,"author":{"gitId":"-"},"content":"                + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2 + INVALID_AVATAR_NO_FILE;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_FILE_NOT_FOUND);"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"        /* Case: invalid jersey avatar -\u003e rejected */"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":288,"author":{"gitId":"-"},"content":"                + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2 + INVALID_AVATAR_TYPE;"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Avatar.MESSAGE_AVATAR_CONSTRAINTS);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitId":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":294,"author":{"gitId":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitId":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitId":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":297,"author":{"gitId":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitId":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":299,"author":{"gitId":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":300,"author":{"gitId":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":301,"author":{"gitId":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":302,"author":{"gitId":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":303,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":304,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":305,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":311,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":312,"author":{"gitId":"-"},"content":"     * instead."},{"lineNumber":313,"author":{"gitId":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":314,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":318,"author":{"gitId":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        // TODO: place holder for success message, change to proper assert method"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":329,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":330,"author":{"gitId":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":331,"author":{"gitId":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":332,"author":{"gitId":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":333,"author":{"gitId":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":334,"author":{"gitId":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":335,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":345,"author":{"gitId":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":346,"author":{"gitId":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":347,"author":{"gitId":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":348,"author":{"gitId":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":349,"author":{"gitId":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":350,"author":{"gitId":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":351,"author":{"gitId":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":352,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":353,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":364,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":5,"-":359}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.After;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":25,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * for test verification."},{"lineNumber":41,"author":{"gitId":"-"},"content":" */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @ClassRule"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private TestApp testApp;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @After"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        rememberStates();"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":120,"author":{"gitId":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * their current state."},{"lineNumber":175,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    private void rememberStates() {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * of the previously selected person."},{"lineNumber":186,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":211,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":218,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":225,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":246,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":252,"author":{"gitId":"codeeong"},"content":"            //assertEquals that the detail card is correct"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitId":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":262,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    protected Model getModel() {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        return testApp.getModel();"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":2,"-":264}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"codeeong"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AVATAR_NO_FILE;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AVATAR_TYPE;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.JERSEY_NUMBER_DESC_17;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.JERSEY_NUMBER_DESC_2;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":23,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POSITION_DESC_MIDFILED;"},{"lineNumber":24,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POSITION_DESC_STRIKER;"},{"lineNumber":25,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_0;"},{"lineNumber":26,"author":{"gitId":"codeeong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_1;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_JERSEY_NUMBER_2;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POSITION_MIDFIELD;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_1;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":74,"author":{"gitId":"-"},"content":"         * -\u003e edited"},{"lineNumber":75,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":78,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \""},{"lineNumber":79,"author":{"gitId":"-"},"content":"                + RATING_DESC_1 + \" \" + POSITION_DESC_MIDFILED + \" \" + JERSEY_NUMBER_DESC_2;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":81,"author":{"gitId":"codeeong"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .withRating(VALID_RATING_1).withPosition(VALID_POSITION_MIDFIELD)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        model.updatePerson("},{"lineNumber":95,"author":{"gitId":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + POSITION_DESC_MIDFILED + RATING_DESC_1"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                + JERSEY_NUMBER_DESC_17;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * -\u003e rejected"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":139,"author":{"gitId":"-"},"content":"         * browser url changes"},{"lineNumber":140,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        showAllPersons();"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        selectPerson(index);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        Avatar.setUpPlaceholderForTest();"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        /* Case: invalid avatar -\u003e rejected */"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_AVATAR_NO_FILE,"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                EditCommand.MESSAGE_FILE_NOT_FOUND);"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        /* Case: invalid avatar -\u003e rejected */"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_AVATAR_TYPE,"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                Avatar.MESSAGE_AVATAR_CONSTRAINTS);"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":221,"author":{"gitId":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":222,"author":{"gitId":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":223,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":241,"author":{"gitId":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":245,"author":{"gitId":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":248,"author":{"gitId":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":253,"author":{"gitId":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":254,"author":{"gitId":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":255,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitId":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":262,"author":{"gitId":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitId":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":264,"author":{"gitId":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitId":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":266,"author":{"gitId":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitId":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitId":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitId":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":270,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":272,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":273,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":289,"author":{"gitId":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":290,"author":{"gitId":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitId":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":292,"author":{"gitId":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":293,"author":{"gitId":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":294,"author":{"gitId":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitId":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":296,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":298,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":6,"-":302}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","fileType":"tests","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        //use accelerator"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        getCommandBox().click();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        //use menu button"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        //use command box"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // open help window and give it focus"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":62,"author":{"gitId":"codeeong"},"content":"        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"codeeong":1,"-":88}}]
